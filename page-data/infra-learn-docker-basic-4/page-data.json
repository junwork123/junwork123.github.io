{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/infra-learn-docker-basic-4/",
    "result": {"data":{"cur":{"id":"7d858f2a-d198-513d-a501-0ae6c4d7461f","html":"<p>지적과 댓글은 언제나 환영합니다!</p>\n<br>\n<h1 id=\"docker-공식문서-같이읽기\" style=\"position:relative;\"><a href=\"#docker-%EA%B3%B5%EC%8B%9D%EB%AC%B8%EC%84%9C-%EA%B0%99%EC%9D%B4%EC%9D%BD%EA%B8%B0\" aria-label=\"docker 공식문서 같이읽기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Docker 공식문서 같이읽기</h1>\n<p><a href=\"https://docs.docker.com/engine/reference/builder/\">도커 공식문서</a>를 번역 및 요약해보았다!</p>\n<p>최대한 신중히 번역하려고 노력했지만 실수가 있다면 너그럽게 댓글로 지적해주시길 바란다!</p>\n<br>\n<p>P.S</p>\n<p>추가로 원문을 직접 읽어보셔도 큰 도움이 될 것이라고 생각한다.</p>\n<br>\n<hr>\n<h2 id=\"format\" style=\"position:relative;\"><a href=\"#format\" aria-label=\"format permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Format</h2>\n<ul>\n<li>\n<p>명령어(Instruction)</p>\n<ul>\n<li>명령어는 대문자로 작성한다.</li>\n<li>도커 명령어는 대소문자 구분이 없지만, arguments와 쉽게 구분하기 위해서 권장한다.</li>\n</ul>\n</li>\n<li>\n<p>주석</p>\n<ul>\n<li>주석은 ‘#’으로 작성</li>\n<li>주석과 공백은 실행 전에 제거되어 실행된다.</li>\n<li>하지만 공백이 명령어의 arguments라면 유지된다.\n<div class=\"gatsby-highlight\" data-language=\"docker\"><pre class=\"language-docker\"><code class=\"language-docker\"><span class=\"token comment\"># 실행 전</span>\n\t\t\t\t<span class=\"token comment\"># this is a comment-line</span>\n    <span class=\"token instruction\"><span class=\"token keyword\">RUN</span> echo hello</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> echo <span class=\"token string\">\"\\\n     hello\\\n     world\"</span></span>\n\n<span class=\"token comment\"># 실행 후</span>\n<span class=\"token comment\"># this is a comment-line</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> echo hello</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> echo <span class=\"token string\">\"\\\n     hello\\\n     world\"</span></span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>파서 지시문(Parse Directive)</p>\n<ul>\n<li>Parse Directive는 특별한 종류의 주석으로 이 지시어 아랫줄부터 영향을 준다. (필수 X)</li>\n<li>Parse Directive에는 <code class=\"language-text\">syntax</code> 와 <code class=\"language-text\">escape</code> 2가지 용법이 있다.\n<ul>\n<li><code class=\"language-text\">syntax</code> 는 사용하고자 하는 특정 Dockerfile 이미지를 지정할 때 쓴다. (<a href=\"https://docs.docker.com/build/buildkit/\">BuildKit</a> 필요)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"docker\"><pre class=\"language-docker\"><code class=\"language-docker\"><span class=\"token comment\"># syntax=docker/dockerfile:1</span>\n<span class=\"token comment\"># syntax=docker.io/docker/dockerfile:1</span>\n<span class=\"token comment\"># syntax=example.com/user/repo:tag@sha256:abcdef...</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">escape</code> 는 Dockerfile의 개행문자를 지정할때 사용한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"docker\"><pre class=\"language-docker\"><code class=\"language-docker\"><span class=\"token comment\"># escape=`</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">FROM</span> microsoft/nanoserver</span>\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> testfile.txt c:<span class=\"token operator\">\\</span>\nRUN dir c:<span class=\"token operator\">\\</span></span></code></pre></div>\n</li>\n<li>Parse Directive는 Build 단계에서 레이어를 추가하거나 보여지지는 않는다.</li>\n<li>Parse Directive는 이후 빈 라인이 나타나거나 명령어가 실행되면, 나머지 Parse Directive는 주석으로 간주된다.\n<em>(Once a comment, empty line or builder instruction has been processed, Docker no longer looks for parser directives)</em>\n<div class=\"gatsby-highlight\" data-language=\"docker\"><pre class=\"language-docker\"><code class=\"language-docker\"><span class=\"token comment\"># 이 주석으로 아래 Parse Directive가 무효가 됨. (잘못된 예시)</span>\n<span class=\"token comment\"># directive=value</span>\n<span class=\"token instruction\"><span class=\"token keyword\">FROM</span> ImageName</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"docker\"><pre class=\"language-docker\"><code class=\"language-docker\"><span class=\"token comment\"># unknowndirective=value</span>\n<span class=\"token comment\"># knowndirective=value</span>\n<span class=\"token comment\"># 인식되지 못한 Parse Directive는 주석으로 처리되어</span>\n<span class=\"token comment\"># 다음 줄 'knowndirective=value'까지 무효 처리가 된다. (잘못된 예시)</span></code></pre></div>\n</li>\n<li>때문에, Dockerfile 최상단에 위치해야하며 Parse Directive끼리 공백없이 붙여서 작성한 이후에 공백 라인을 주는 것을 원칙으로 한다.</li>\n<li>단일 지시문은 한번만 사용할 수 있다.(같은 지시문 두번 사용 X)</li>\n<li>소문자로 작성하는 것이 권장된다.</li>\n</ul>\n</li>\n<li>\n<p>Environment replacement</p>\n<ul>\n<li>환경 변수는 <code class=\"language-text\">ENV</code> 키워드와 함께 쓰인다.</li>\n<li>사용 형태는 2가지를 허용한다. <code class=\"language-text\">$variable_name</code>, <code class=\"language-text\">${variable_name}</code>\n<div class=\"gatsby-highlight\" data-language=\"docker\"><pre class=\"language-docker\"><code class=\"language-docker\"><span class=\"token instruction\"><span class=\"token keyword\">FROM</span> busybox</span>\n<span class=\"token instruction\"><span class=\"token keyword\">ENV</span> FOO=/bar</span>\n<span class=\"token instruction\"><span class=\"token keyword\">WORKDIR</span> <span class=\"token variable\">${FOO}</span>   # WORKDIR /bar</span>\n<span class=\"token instruction\"><span class=\"token keyword\">ADD</span> . <span class=\"token variable\">$FOO</span>       # ADD . /bar</span>\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> <span class=\"token operator\">\\</span><span class=\"token variable\">$FOO</span> /quux # COPY <span class=\"token variable\">$FOO</span> /quux</span></code></pre></div>\n</li>\n<li><code class=\"language-text\">${variable:-word}</code> : variable이 정의되어 있다면 variable, 그렇지 않다면 word를 사용한다.</li>\n<li><code class=\"language-text\">${variable:+word}</code> : variable이 정의되어 있다면 word, 그렇지 않다면 empty string를 반환.</li>\n<li><code class=\"language-text\">\\${foo}</code> 처럼 <code class=\"language-text\">\\</code> 가 앞에 붙는 경우는 문자 그대로 번역되므로 주의가 필요하다</li>\n<li>환경변수 값을 확인하고 변경하기\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># 환경변수 확인하기</span>\n$ <span class=\"token function\">docker</span> inspect\n\n<span class=\"token comment\"># 환경변수 변경하기</span>\n<span class=\"token function\">docker</span> run --env <span class=\"token operator\">&lt;</span>key<span class=\"token operator\">>=</span><span class=\"token operator\">&lt;</span>value<span class=\"token operator\">></span></code></pre></div>\n</li>\n<li><strong>이러한 환경 변수에는 이미지가 변경되지 않도록 주의가 필요하다.</strong>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># 잘못된 예시(이미지가 중간에 변경되어 혼동을 줄 수 있다)</span>\nRUN <span class=\"token assign-left variable\">DEBIAN_FRONTEND</span><span class=\"token operator\">=</span>noninteractive <span class=\"token function\">apt-get</span> update <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> -y <span class=\"token punctuation\">..</span>.</code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p>dockerignore file</p>\n<ul>\n<li>도커 데몬이 동작하는 과정에서 제외/포함할 파일의 규칙을 정한다.</li>\n<li>root 디렉토리에 <code class=\"language-text\">.dockerignore</code> 파일이 있다면 동작하는 내용이다.\n<div class=\"gatsby-highlight\" data-language=\"docker\"><pre class=\"language-docker\"><code class=\"language-docker\">***/temp***\n<span class=\"token comment\"># root의 서브 디렉토리 중</span>\n<span class=\"token comment\"># temp로 시작하는 파일과 디렉토리 둘다 제외한다.</span>\n<span class=\"token comment\"># ignore /somedir/temporary.txt</span>\n<span class=\"token comment\"># ignore /somedir/temp</span>\n\n***/*/temp***\n<span class=\"token comment\"># root의 2레벨 이하의 서브 디렉토리 중</span>\n<span class=\"token comment\"># temp로 시작하는 파일과 디렉토리 둘다 제외한다.</span>\n<span class=\"token comment\"># ignore /somedir/subdir/temporary.txt</span>\n\n**temp?**\n<span class=\"token comment\"># root 디렉토리에서</span>\n<span class=\"token comment\"># temp로 시작하는 파일과 디렉토리 둘다 제외한다.</span>\n<span class=\"token comment\"># ignore /tempa</span>\n<span class=\"token comment\"># ignore /tempb</span>\n\n***.md\n!README*.md\nREADME-secret.md**\n<span class=\"token comment\"># 모든 md파일을 제외(exclude)하되</span>\n<span class=\"token comment\"># README*.md 형식은 예외로 include한다.</span>\n<span class=\"token comment\"># 그 중에서도 README-secret.md는 제외(exclude)로 한다.</span>\n\t<span class=\"token comment\">#\t유의할 점 :\t형식 -> case 순으로 와야한다.</span>\n\t<span class=\"token comment\"># 아래의 경우 가운데 줄은 무효가 된다.</span>\n\t*.md\n\t**README-secret.md**\n\t!README*.md</code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n<br>\n<hr>\n<h2 id=\"from\" style=\"position:relative;\"><a href=\"#from\" aria-label=\"from permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>FROM</h2>\n<ul>\n<li>Dockerfile 명령어의 시작은 <code class=\"language-text\">FROM</code>으로 시작해야 한다.</li>\n<li><code class=\"language-text\">ARG</code> 키워드로 FROM 시작전에 변수를 만들어 사용할 수 있다.</li>\n<li>대신 FROM 명령어가 끝나면 해당 변수는 빌드 과정에서 사용할 수 없다.\n<div class=\"gatsby-highlight\" data-language=\"docker\"><pre class=\"language-docker\"><code class=\"language-docker\"><span class=\"token comment\"># usage</span>\n<span class=\"token comment\"># FROM [--platform=&lt;platform>] &lt;image>[:&lt;tag>] [AS &lt;name>]</span>\n<span class=\"token instruction\"><span class=\"token keyword\">ARG</span> CODE_VERSION=latest</span>\n<span class=\"token instruction\"><span class=\"token keyword\">FROM</span> base:<span class=\"token variable\">${CODE_VERSION}</span> <span class=\"token keyword\">AS</span> baseApp</span>\n<span class=\"token instruction\"><span class=\"token keyword\">CMD</span>  /code/run-app</span></code></pre></div>\n</li>\n</ul>\n<br>\n<hr>\n<h2 id=\"run\" style=\"position:relative;\"><a href=\"#run\" aria-label=\"run permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>RUN</h2>\n<ul>\n<li><code class=\"language-text\">RUN</code> 명령어는 항상 현재 이미지의 최신상태에서 동작한다.</li>\n<li><code class=\"language-text\">RUN</code> 명령어의 결과로 변경된 이미지는 다음 단계에 동작할 Dockerfile의 이미지에 그대로 반영된다.\n<div class=\"gatsby-highlight\" data-language=\"docker\"><pre class=\"language-docker\"><code class=\"language-docker\"><span class=\"token comment\"># 한줄로 쓸때</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> /bin/bash -c <span class=\"token string\">'source $HOME/.bashrc; echo $HOME'</span></span>\n\n<span class=\"token comment\"># 여러줄로 쓸때</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> /bin/bash -c <span class=\"token string\">'source $HOME/.bashrc; \\\necho $HOME'</span></span>\n\n<span class=\"token comment\"># JSON 형식</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> [<span class=\"token string\">\"c:\\\\windows\\\\system32\\\\tasklist.exe\"</span>]</span></code></pre></div>\n</li>\n<li><code class=\"language-text\">RUN</code> 명령어는 cache를 사용하기 때문에 실행결과가 다음 빌드에서 재사용될 수 있다.\n<div class=\"gatsby-highlight\" data-language=\"docker\"><pre class=\"language-docker\"><code class=\"language-docker\"><span class=\"token comment\"># 캐시로 이 명령어의 결과가 재사용될 수 있다.</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> apt-get dist-upgrade -y</span>\n\n<span class=\"token comment\"># 캐시를 무시하고 매번 실행하려면</span>\ndocker build --no-cache</code></pre></div>\n</li>\n<li><code class=\"language-text\">--mount</code> 옵션은 아래 4가지 경우 build 과정에서 생산성을 높이는 방법이 될 수 있다\n<ul>\n<li><code class=\"language-text\">bind</code> : Default 옵션, 기존에 있던 파일을 재사용할 때</li>\n<li><code class=\"language-text\">cache</code> : 빌드 시 컴파일러, 패키지매니저에서 캐시 디렉토리를 활용하고 싶을때\n<div class=\"gatsby-highlight\" data-language=\"docker\"><pre class=\"language-docker\"><code class=\"language-docker\"><span class=\"token comment\"># syntax=docker/dockerfile:1</span>\n\n<span class=\"token comment\">#cache apt packages</span>\n<span class=\"token instruction\"><span class=\"token keyword\">FROM</span> ubuntu</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> rm -f /etc/apt/apt.conf.d/docker-clean; echo <span class=\"token string\">'Binary::apt::APT::Keep-Downloaded-Packages \"true\";'</span> > /etc/apt/apt.conf.d/keep-cache</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> **--mount=type=cache**,target=/var/cache/apt,sharing=locked <span class=\"token operator\">\\</span>\n  --mount=type=cache,target=/var/lib/apt,sharing=locked <span class=\"token operator\">\\</span>\n  apt update &amp;&amp; apt-get --no-install-recommends install -y gcc</span></code></pre></div>\n</li>\n<li><code class=\"language-text\">secret</code> : 빌드 시 secret 파일에 접근하고 복사할 때\n<div class=\"gatsby-highlight\" data-language=\"docker\"><pre class=\"language-docker\"><code class=\"language-docker\"><span class=\"token comment\"># syntax=docker/dockerfile:1</span>\n\n<span class=\"token comment\"># access to S3</span>\n<span class=\"token instruction\"><span class=\"token keyword\">FROM</span> python:3</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> pip install awscli</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> **--mount=type=secret**,id=aws,target=/root/.aws/credentials <span class=\"token operator\">\\</span>\n  aws s3 cp s3://... ...</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># bash</span>\n$ <span class=\"token function\">docker</span> buildx build --secret <span class=\"token assign-left variable\">id</span><span class=\"token operator\">=</span>aws,src<span class=\"token operator\">=</span><span class=\"token environment constant\">$HOME</span>/.aws/credentials <span class=\"token builtin class-name\">.</span></code></pre></div>\n</li>\n<li><code class=\"language-text\">ssh</code> : 빌드 시 ssh 파일에 접근하고 복사할 때\n<div class=\"gatsby-highlight\" data-language=\"docker\"><pre class=\"language-docker\"><code class=\"language-docker\"><span class=\"token comment\"># syntax=docker/dockerfile:1</span>\n\n<span class=\"token comment\"># access to Gitlab</span>\n<span class=\"token instruction\"><span class=\"token keyword\">FROM</span> alpine</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> apk add --no-cache openssh-client</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> mkdir -p -m 0700 ~/.ssh &amp;&amp; ssh-keyscan gitlab.com >> ~/.ssh/known_hosts</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> **--mount=type=ssh** <span class=\"token operator\">\\</span>\n  ssh -q -T git@gitlab.com 2>&amp;1 | tee /hello</span>\n<span class=\"token comment\"># \"Welcome to GitLab, @GITLAB_USERNAME_ASSOCIATED_WITH_SSHKEY\" should be printed here</span>\n<span class=\"token comment\"># with the type of build progress is defined as `plain`.</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># bash</span>\n$ <span class=\"token builtin class-name\">eval</span> <span class=\"token variable\"><span class=\"token variable\">$(</span>ssh-agent<span class=\"token variable\">)</span></span>\n$ ssh-add ~/.ssh/id_rsa\n<span class=\"token punctuation\">(</span>Input your passphrase here<span class=\"token punctuation\">)</span>\n$ <span class=\"token function\">docker</span> buildx build --ssh <span class=\"token assign-left variable\">default</span><span class=\"token operator\">=</span><span class=\"token environment constant\">$SSH_AUTH_SOCK</span> <span class=\"token builtin class-name\">.</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li><code class=\"language-text\">--network</code> 옵션은 커맨드가 동작하고 있는 네트워크 환경을 컨트롤할 수 있게 해준다.\n<div class=\"gatsby-highlight\" data-language=\"docker\"><pre class=\"language-docker\"><code class=\"language-docker\"><span class=\"token comment\"># syntax=docker/dockerfile:1</span>\n\n<span class=\"token comment\"># isolating external effects</span>\n<span class=\"token instruction\"><span class=\"token keyword\">FROM</span> python:3.6</span>\n<span class=\"token instruction\"><span class=\"token keyword\">ADD</span> mypackage.tgz wheels/</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> **--network=none** pip install --find-links wheels mypackage</span></code></pre></div>\n</li>\n</ul>\n<br>\n<hr>\n<h2 id=\"cmd\" style=\"position:relative;\"><a href=\"#cmd\" aria-label=\"cmd permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CMD</h2>\n<ul>\n<li>CMD 명령어의 주 목적은 실행중인 컨테이너에게 기본값들을 제공하기 위해서이다.</li>\n<li>CMD 명령어를 여러개 작성했다면 가장 마지막 CMD명령만 효력을 발생시킨다.</li>\n<li>총 3가지 형태로 사용할 수 있다.\n<ul>\n<li><code class=\"language-text\">CMD [\"executable\",\"param1\",\"param2\"]</code> (exec 형식, 권장하는 형식)\n<div class=\"gatsby-highlight\" data-language=\"docker\"><pre class=\"language-docker\"><code class=\"language-docker\"><span class=\"token comment\"># exec 형식을 사용하면서 쉘을 직접 실행하는 경우,</span>\n<span class=\"token comment\"># 도커가 아닌 환경 변수 확장을 수행하는 쉘입니다.</span>\n<span class=\"token instruction\"><span class=\"token keyword\">FROM</span> ubuntu</span>\n<span class=\"token instruction\"><span class=\"token keyword\">CMD</span> [ <span class=\"token string\">\"sh\"</span>, <span class=\"token string\">\"-c\"</span>, <span class=\"token string\">\"echo $HOME\"</span>]</span></code></pre></div>\n</li>\n<li><code class=\"language-text\">CMD [\"param1\",\"param2\"]</code> (EntryPoint 형식)\n<div class=\"gatsby-highlight\" data-language=\"docker\"><pre class=\"language-docker\"><code class=\"language-docker\"><span class=\"token comment\"># Shell 없이 실행하고 싶을 때</span>\n<span class=\"token comment\"># JSON 형식 + 실행가능한 프로그램의 경로</span>\n<span class=\"token instruction\"><span class=\"token keyword\">FROM</span> ubuntu</span>\n<span class=\"token instruction\"><span class=\"token keyword\">CMD</span> [<span class=\"token string\">\"/usr/bin/wc\"</span>,<span class=\"token string\">\"--help\"</span>]</span></code></pre></div>\n</li>\n<li><code class=\"language-text\">CMD command param1 param2</code> (Shell 형식)\n<div class=\"gatsby-highlight\" data-language=\"docker\"><pre class=\"language-docker\"><code class=\"language-docker\"><span class=\"token comment\"># Shell에서 실행하고 싶을때</span>\n<span class=\"token instruction\"><span class=\"token keyword\">FROM</span> ubuntu</span>\n<span class=\"token instruction\"><span class=\"token keyword\">CMD</span> echo <span class=\"token string\">\"This is a test.\"</span> | wc -</span></code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n<br>\n<hr>\n<h2 id=\"label\" style=\"position:relative;\"><a href=\"#label\" aria-label=\"label permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>LABEL</h2>\n<ul>\n<li><code class=\"language-text\">LABEL</code> 명령어는 이미지에 metadata를 추가하는 Key-Value 쌍이다.</li>\n<li>부모, 베이스 이미지의 값도 포함하고 있으며, Key값이 같은 경우 최신값으로 덮어씌워진다.\n<div class=\"gatsby-highlight\" data-language=\"docker\"><pre class=\"language-docker\"><code class=\"language-docker\"><span class=\"token instruction\"><span class=\"token keyword\">LABEL</span> multi.label1=<span class=\"token string\">\"value1\"</span> multi.label2=<span class=\"token string\">\"value2\"</span> other=<span class=\"token string\">\"value3\"</span></span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">LABEL</span> <span class=\"token string\">\"com.example.vendor\"</span>=<span class=\"token string\">\"ACME Incorporated\"</span> <span class=\"token operator\">\\</span>\n      version=<span class=\"token string\">\"1.0\"</span> <span class=\"token operator\">\\</span>\n      description=<span class=\"token string\">\"This text illustrates\"</span></span></code></pre></div>\n</li>\n<li>특정 이미지의 라벨을 보고싶을때\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">docker</span> image inspect --format<span class=\"token operator\">=</span><span class=\"token string\">''</span> myimage\n\n<span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"com.example.vendor\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"ACME Incorporated\"</span>,\n  <span class=\"token string\">\"com.example.label-with-value\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"foo\"</span>,\n  <span class=\"token string\">\"version\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"1.0\"</span>,\n  <span class=\"token string\">\"description\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"This text illustrates that label-values can span multiple lines.\"</span>,\n  <span class=\"token string\">\"multi.label1\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"value1\"</span>,\n  <span class=\"token string\">\"multi.label2\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"value2\"</span>,\n  <span class=\"token string\">\"other\"</span><span class=\"token builtin class-name\">:</span> <span class=\"token string\">\"value3\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li><code class=\"language-text\">MAINTAINER</code> 명령어의 경우 <strong>deprecated</strong>되었기 때문에 <strong>LABEL의 author 필드로 대체</strong>한다.\n<div class=\"gatsby-highlight\" data-language=\"docker\"><pre class=\"language-docker\"><code class=\"language-docker\"><span class=\"token instruction\"><span class=\"token keyword\">LABEL</span> org.opencontainers.image.authors=<span class=\"token string\">\"SvenDowideit@home.org.au\"</span></span></code></pre></div>\n</li>\n</ul>\n<br>\n<hr>\n<h2 id=\"expose\" style=\"position:relative;\"><a href=\"#expose\" aria-label=\"expose permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>EXPOSE</h2>\n<ul>\n<li><code class=\"language-text\">EXPOSE</code> 명령어는 컨테이너가 동작하는 동안 수신할 Port와 Protocol(TCP, UDP)을 설정한다.\n<div class=\"gatsby-highlight\" data-language=\"docker\"><pre class=\"language-docker\"><code class=\"language-docker\"><span class=\"token instruction\"><span class=\"token keyword\">EXPOSE</span> 80/tcp</span>\n<span class=\"token instruction\"><span class=\"token keyword\">EXPOSE</span> 80/udp</span></code></pre></div>\n</li>\n<li>하지만 이 명령어는 실제로 Port를 열어두는게 아니라 포트의 형식을 정하는 것이다.</li>\n<li>실제 Port가 동작하도록 하려면, 아래와 같이 <code class=\"language-text\">docker run -p</code> 플래그로 포트를 지정해줘야 한다.\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># Format</span>\n<span class=\"token comment\"># 1. ip:hostPort:containerPort</span>\n<span class=\"token comment\"># 2. ip::containerPort</span>\n<span class=\"token comment\"># 3. hostPort:containerPort</span>\n<span class=\"token comment\"># 4. containerPort</span>\n\n<span class=\"token comment\"># 컨테이너의 특정 포트를 개방한다.</span>\n$ <span class=\"token function\">docker</span> run -p <span class=\"token number\">80</span>:80/tcp -p <span class=\"token number\">80</span>:80/udp\n\n<span class=\"token comment\"># 특정 범위의 컨테이너 포트를 개방한다.</span>\n$ <span class=\"token function\">docker</span> run -p <span class=\"token number\">1234</span>-1236:1234-1236/tcp\n\n<span class=\"token comment\"># expose된 모든 포트를 개방한다</span>\n$ <span class=\"token function\">docker</span> run -P\n\n<span class=\"token comment\"># expose된 모든 포트를 개방하고,</span>\n<span class=\"token comment\"># 다른 컨테이너가 클라이언트가 되도록 bridge network를 형성한다.</span>\n$ <span class=\"token function\">docker</span> run -P --link<span class=\"token operator\">=</span><span class=\"token variable\">${another-container-id}</span></code></pre></div>\n</li>\n</ul>\n<br>\n<p>(작성중입니다 ㅠㅠ)</p>\n<hr>\n<h2 id=\"add\" style=\"position:relative;\"><a href=\"#add\" aria-label=\"add permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ADD</h2>\n<br>\n<hr>\n<h2 id=\"copy\" style=\"position:relative;\"><a href=\"#copy\" aria-label=\"copy permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>COPY</h2>\n<br>\n<hr>\n<h2 id=\"entrypoint\" style=\"position:relative;\"><a href=\"#entrypoint\" aria-label=\"entrypoint permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ENTRYPOINT</h2>\n<br>\n<hr>\n<h2 id=\"volume\" style=\"position:relative;\"><a href=\"#volume\" aria-label=\"volume permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>VOLUME</h2>\n<br>\n<hr>\n<h2 id=\"user\" style=\"position:relative;\"><a href=\"#user\" aria-label=\"user permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>USER</h2>\n<br>\n<hr>\n<h2 id=\"workdir\" style=\"position:relative;\"><a href=\"#workdir\" aria-label=\"workdir permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>WORKDIR</h2>\n<br>\n<hr>\n<h2 id=\"arg\" style=\"position:relative;\"><a href=\"#arg\" aria-label=\"arg permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ARG</h2>\n<br>\n<hr>\n<br>\n<p><em>출처</em></p>\n<p><em><a href=\"https://docs.docker.com/engine/reference/builder/\">도커 공식문서</a></em></p>\n<br/>\n<hr>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#format\">Format</a></li>\n<li><a href=\"#from\">FROM</a></li>\n<li><a href=\"#run\">RUN</a></li>\n<li><a href=\"#cmd\">CMD</a></li>\n<li><a href=\"#label\">LABEL</a></li>\n<li><a href=\"#expose\">EXPOSE</a></li>\n<li><a href=\"#add\">ADD</a></li>\n<li><a href=\"#copy\">COPY</a></li>\n<li><a href=\"#entrypoint\">ENTRYPOINT</a></li>\n<li><a href=\"#volume\">VOLUME</a></li>\n<li><a href=\"#user\">USER</a></li>\n<li><a href=\"#workdir\">WORKDIR</a></li>\n<li><a href=\"#arg\">ARG</a></li>\n</ul>\n</div>","excerpt":"지적과 댓글은 언제나 환영합니다! Docker 공식문서 같이읽기 도커 공식문서를 번역 및 요약해보았다! 최대한 신중히 번역하려고 노력했지만 실수가 있다면 너그럽게 댓글로 지적해주시길 바란다! P.S 추가로 원문을 직접 읽어보셔도 큰 도움이 될 것이라고 생각한다. Format 명령어(Instruction) 명령어는 대문자로 작성한다. 도커 명령어는 대소문자 구분이 없지만, arguments와 쉽게 구분하기 위해서 권장한다. 주석 주석은 ‘#’으로 작성 주석과 공백은 실행 전에 제거되어 실행된다. 하지만 공백이 명령어의 arguments라면 유지된다. 파서 지시문(Parse Directive) Parse Directive는 특별한 종류의 주석으로 이 지시어 아랫줄부터 영향을 준다. (필수 X) Parse Directive에는  와  2가지 용법이 있다.  는 사용하고자 하는 특정 Dockerfile 이미지를 지정할 때 쓴다. (BuildKit 필요)  는 Dockerfile의 개행문자…","frontmatter":{"date":"November 17, 2022","title":"Let’s Go Docker(번외편) - Docker 공식문서 같이읽기","categories":"infra","author":"주녁","emoji":"🔮"},"fields":{"slug":"/infra-learn-docker-basic-4/"}},"next":{"id":"856848bf-7237-501e-a187-3060a4b5ac79","html":"<p>지적과 댓글은 언제나 환영합니다!</p>\n<br/>\n<h1 id=\"변경사항을-docker로-자동-배포하기\" style=\"position:relative;\"><a href=\"#%EB%B3%80%EA%B2%BD%EC%82%AC%ED%95%AD%EC%9D%84-docker%EB%A1%9C-%EC%9E%90%EB%8F%99-%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0\" aria-label=\"변경사항을 docker로 자동 배포하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>변경사항을 Docker로 자동 배포하기</h1>\n<p>변경사항을 감지하고 배포하려면</p>\n<p>CI/CD 파이프라인 구축을 먼저 알아야한다.</p>\n<br>\n<p>CI/CD 파이프라인을 구축하는 방법은</p>\n<p>버전 관리 플랫폼별로 다르다.</p>\n<br>\n<p>대표적으로 Github Action, Gitlab, Terraform 등이 있으나</p>\n<p>Github Action으로 진행해보도록 하겠다.</p>\n<br>\n<hr>\n<h2 id=\"github-action을-이용한-cicd\" style=\"position:relative;\"><a href=\"#github-action%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-cicd\" aria-label=\"github action을 이용한 cicd permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Github Action을 이용한 CI/CD</h2>\n<br>\n<p>Github는 사용자가 CI/CD 도구를 직접 통합해야 한다.</p>\n<p>선택지로 Jenkins, CircleCI, TravisCI 등이 있다</p>\n<br>\n<p>필자는 현재 이 블로그도 Github Action으로 자동 배포하고 있다.</p>\n<p>그 때의 <a href=\"https://www.junwork.net/blog-build-deploy-2/\">빌드 스크립트</a>를 재활용해보자.</p>\n<p>자세한 설명은 주석을 참고하자.</p>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># 알아두기\n중간중간 보이는 secret들은 저장소 내 환경변수로,\nRepository 상단 Settings > Secrets에서 설정할 수 있다.</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> App Deployment <span class=\"token comment\"># 이 스크립트의 제목</span>\n\n<span class=\"token comment\"># 어떤 행동을 할때마다 실행할지</span>\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\"># master, release/v*라는 이름의 브랜치에 push가 발생할 때마다</span>\n  <span class=\"token comment\"># ex) release/v0.1, release/v2.1.5</span>\n  <span class=\"token key atrule\">push</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> master\n      <span class=\"token punctuation\">-</span> release/v*\n\n  <span class=\"token comment\"># feature, fix 브랜치에 pull_request가 발생할 때마다</span>\n  <span class=\"token key atrule\">pull_request</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> feature<span class=\"token punctuation\">-</span>*\n      <span class=\"token punctuation\">-</span> fix<span class=\"token punctuation\">-</span>*\n\n<span class=\"token comment\"># 실행할 작업을 순서대로 정의함</span>\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n    \n    <span class=\"token comment\"># 체크아웃</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> checkout\n      <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v3\n\n    <span class=\"token comment\"># JDK 설치</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Set up JDK 11\n      <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/setup<span class=\"token punctuation\">-</span>java@v3\n      <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">java-version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'11'</span>\n        <span class=\"token key atrule\">distribution</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'temurin'</span>\n\n    <span class=\"token comment\"># DB 설정 파일 생성</span>\n    <span class=\"token comment\"># 중요 정보는 Github Secret에서 복사해온다.</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> make application<span class=\"token punctuation\">-</span>database.yaml\n      <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n        # create application-database.yaml\n        cd ./src/main/resources</span>\n\n        <span class=\"token comment\"># application-database.yaml 파일 생성</span>\n        touch ./application<span class=\"token punctuation\">-</span>database.yaml\n\n        <span class=\"token comment\"># GitHub-Actions 에서 설정한 값을 application-database.yaml 파일에 쓰기</span>\n        echo \"$<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.DATABASE <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\" <span class=\"token punctuation\">></span><span class=\"token punctuation\">></span> ./application<span class=\"token punctuation\">-</span>database.yaml\n      <span class=\"token key atrule\">shell</span><span class=\"token punctuation\">:</span> bash\n\n    <span class=\"token comment\"># gradle 빌드</span>\n    <span class=\"token comment\"># maven 빌드 : mvn package</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Build with Gradle\n      <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> ./gradlew bootJar\n\n\n    <span class=\"token comment\"># 웹 이미지 빌드 및 도커허브에 push</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> web docker build and push\n      <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}\n        docker build -t ${{ secrets.DOCKER_REPO }}/second-eyes-web .\n        docker push ${{ secrets.DOCKER_REPO }}/second-eyes-web</span></code></pre></div>\n<p>위 스크립트를 Github Action을 통해 동작시키면</p>\n<p><code class=\"language-text\">빌드</code> -> <code class=\"language-text\">배포</code> -> <code class=\"language-text\">도커 이미지화</code>까지 한번에 처리할 수 있다.</p>\n<p>추가적으로 실행까지 하려면 아래 Docker Compose 스크립트를 추가하면 된다.</p>\n<p>Docker Compose의 개념이 생소할 수 있겠지만,</p>\n<p>실행 정보까지 추가해주는 것으로 생각하면 좋다.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\">    <span class=\"token comment\">## docker compose up</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> executing remote ssh commands using password\n      <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> appleboy/ssh<span class=\"token punctuation\">-</span>action@master\n      <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">host</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.HOST <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n        <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> ubuntu\n        <span class=\"token key atrule\">key</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.KEY <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n        <span class=\"token key atrule\">script</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n          sudo docker rm -f $(docker ps -qa)\n          sudo docker pull ${{ secrets.DOCKER_REPO }}/second-eyes-web\n          sudo docker pull ${{ secrets.DOCKER_REPO }}/second-eyes-nginx\n          docker-compose up -d\n          docker image prune -f</span></code></pre></div>\n<br>\n<br>\n<hr>\n<p><em>출처</em></p>\n<p><em><a href=\"https://devlog-wjdrbs96.tistory.com/361\">wjdrbs96님 블로그</a></em></p>\n<p><em><a href=\"https://stalker5217.netlify.app/devops/github-action-aws-ci-cd-1/\">stalker5217님 블로그</a></em></p>\n<p><em><a href=\"https://velog.io/@rmswjdtn/Spring-Docker-Github-Action-Spring-Boot-%EC%9E%90%EB%8F%99%EB%B0%B0%ED%8F%AC%ED%99%98%EA%B2%BD-%EB%A7%8C%EB%93%A4%EA%B8%B0\">rmswjdtn님 블로그</a></em></p>\n<br/>\n<hr>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#github-action%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-cicd\">Github Action을 이용한 CI/CD</a></li>\n</ul>\n</div>","frontmatter":{"date":"November 16, 2022","title":"Let’s Go Docker(심화편) - 변경사항을 Docker로 자동 배포하기","categories":"infra","author":"주녁","emoji":"🔮"},"fields":{"slug":"/infra-learn-docker-basic-3/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://www.junwork.net","comments":{"utterances":{"repo":"junwork123/blog-comments"}}}}},"pageContext":{"slug":"/infra-learn-docker-basic-4/","nextSlug":"/infra-learn-docker-basic-3/","prevSlug":""}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}