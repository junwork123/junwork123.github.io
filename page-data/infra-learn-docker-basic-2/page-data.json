{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/infra-learn-docker-basic-2/",
    "result": {"data":{"cur":{"id":"229bcd5f-6cfc-5c66-8a80-4e8ef2de2f1e","html":"<p>지적과 댓글은 언제나 환영합니다!</p>\n<br/>\n<h1 id=\"어플리케이션을-docker로-배포하기\" style=\"position:relative;\"><a href=\"#%EC%96%B4%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98%EC%9D%84-docker%EB%A1%9C-%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0\" aria-label=\"어플리케이션을 docker로 배포하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>어플리케이션을 Docker로 배포하기</h1>\n<p>이번 실습편에서는</p>\n<p>아래 3가지 단계를 통해 도커를 찍먹해볼 것이다.</p>\n<ul>\n<li>\n<p>Docker 이미지 만들기</p>\n</li>\n<li>\n<p>만든 이미지를 실행해보기</p>\n</li>\n<li>\n<p>변경사항을 자동으로 배포하기(심화편)</p>\n</li>\n</ul>\n<br>\n<hr>\n<h2 id=\"1-docker-이미지-만들기\" style=\"position:relative;\"><a href=\"#1-docker-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"1 docker 이미지 만들기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Docker 이미지 만들기</h2>\n<br>\n<p>Docker 컨테이너는 Docker 이미지를 기반으로 실행된다.</p>\n<p>우리가 만든 어플리케이션을 Docker 이미지로 직접 만들어보자.</p>\n<br>\n<p>우선, 어플리케이션을 빌드한 결과물을 가지고 있어야한다.</p>\n<p>필자는 <code class=\"language-text\">IntelliJ</code>에서 <code class=\"language-text\">Spring Boot</code> 어플리케이션을 <code class=\"language-text\">Jar파일</code>로 만들것이다.</p>\n<p>만드는 방법은 <a href=\"https://www.junwork.net/How-to-build-jar/\">필자가 정리한 글</a>에서 확인할 수 있다.</p>\n<br>\n<p>(만약, 다른 언어나 플랫폼이라면</p>\n<p>자신의 프로젝트에 맞게 빌드 결과물을 얻고 다음 단계를 진행하자.)</p>\n<br>\n<h2 id=\"2-만든-이미지를-실행해보기\" style=\"position:relative;\"><a href=\"#2-%EB%A7%8C%EB%93%A0-%EC%9D%B4%EB%AF%B8%EC%A7%80%EB%A5%BC-%EC%8B%A4%ED%96%89%ED%95%B4%EB%B3%B4%EA%B8%B0\" aria-label=\"2 만든 이미지를 실행해보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 만든 이미지를 실행해보기</h2>\n<p>프로젝트 최상위 디렉토리에</p>\n<p><code class=\"language-text\">dockerfile</code>을 아래와 같은 내용으로생성하자.</p>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">FROM adoptopenjdk/openjdk11\nCMD <span class=\"token punctuation\">[</span><span class=\"token string\">\"./mvnw\"</span>, <span class=\"token string\">\"clean\"</span>, <span class=\"token string\">\"package\"</span><span class=\"token punctuation\">]</span>\nARG <span class=\"token assign-left variable\">JAR_FILE_PATH</span><span class=\"token operator\">=</span>target/*.jar\nCOPY <span class=\"token variable\">${JAR_FILE_PATH}</span> app.jar\nENTRYPOINT <span class=\"token punctuation\">[</span><span class=\"token string\">\"java\"</span>, <span class=\"token string\">\"-jar\"</span>, <span class=\"token string\">\"app.jar\"</span><span class=\"token punctuation\">]</span></code></pre></div>\n<br>\n<p>그리고 빌드해보자.</p>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> build -t docker-example:0.0.1 <span class=\"token builtin class-name\">.</span></code></pre></div>\n<br>\n<p>images 명령어로 docker이미지가 제대로 만들어 졌는지 확인한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> images</code></pre></div>\n<br>\n<p>드디어 Docker 이미지를 실행하는 순간이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"> <span class=\"token function\">docker</span> run docker-example:0.0.1</code></pre></div>\n<br>\n<p>Dokcer가 잘 동작하는지 확인했다면,</p>\n<p>어플리케이션이 잘 동작하는지 확인도 해보자.</p>\n<p>(아래 방법은 예시일 뿐이니 각자 방법으로 자신의 앱에 테스트해보자!)</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">curl</span> localhost:8080/</code></pre></div>\n<br>\n<hr>\n<br>\n<p>지금까지 어플리케이션을 Dockerfile을 통해</p>\n<p>Docker 이미지로 생성해보았다.</p>\n<br>\n<p>하지만, 소스코드의 내용이 변경되면, 다시 위 과정을 거쳐야한다.</p>\n<p>변경사항을 자동으로 배포할 수는 없을까?</p>\n<p>다음 실습편을 통해 배워보도록 하자</p>\n<br>\n<p><em>출처</em></p>\n<p><em><a href=\"https://da2uns2.tistory.com/entry/Docker-%EB%8F%84%EC%BB%A4-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-2-%EB%8F%84%EC%BB%A4-%EA%B8%B0%EB%B3%B8-%EB%AA%85%EB%A0%B9%EC%96%B4\">[Docker] 도커 시작하기 - 2. 도커 기본 명령어 (tistory.com)</a></em></p>\n<p><em><a href=\"https://subicura.com/2017/01/19/docker-guide-for-beginners-2.html\">초보를 위한 도커 안내서 - 설치하고 컨테이너 실행하기 (subicura.com)</a></em></p>\n<p><em><a href=\"https://subicura.com/2017/02/10/docker-guide-for-beginners-create-image-and-deploy.html\">초보를 위한 도커 안내서 - 이미지 만들고 배포하기 (subicura.com)</a></em></p>\n<p><em><a href=\"https://umanking.github.io/2021/07/11/spring-boot-docker-starter/\">Spring Boot, Dockerfile로 이미지 생성, 배포하기 | 개발 저장소 (umanking.github.io)</a></em></p>\n<p><em><a href=\"https://spring.io/guides/topicals/spring-boot-docker\">Topical Guide | Spring Boot Docker</a></em></p>\n<p><em><a href=\"https://docs.docker.com/engine/reference/builder/\">Dockerfile reference | Docker Documentation</a></em></p>\n<br/>\n<hr>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#1-docker-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EB%A7%8C%EB%93%A4%EA%B8%B0\">1. Docker 이미지 만들기</a></li>\n<li><a href=\"#2-%EB%A7%8C%EB%93%A0-%EC%9D%B4%EB%AF%B8%EC%A7%80%EB%A5%BC-%EC%8B%A4%ED%96%89%ED%95%B4%EB%B3%B4%EA%B8%B0\">2. 만든 이미지를 실행해보기</a></li>\n</ul>\n</div>","excerpt":"지적과 댓글은 언제나 환영합니다! 어플리케이션을 Docker로 배포하기 이번 실습편에서는 아래 3가지 단계를 통해 도커를 찍먹해볼 것이다. Docker 이미지 만들기 만든 이미지를 실행해보기 변경사항을 자동으로 배포하기(심화편) 1. Docker 이미지 만들기 Docker 컨테이너는 Docker 이미지를 기반으로 실행된다. 우리가 만든 어플리케이션을 Docker 이미지로 직접 만들어보자. 우선, 어플리케이션을 빌드한 결과물을 가지고 있어야한다. 필자는 에서  어플리케이션을 로 만들것이다. 만드는 방법은 필자가 정리한 글에서 확인할 수 있다. (만약, 다른 언어나 플랫폼이라면 자신의 프로젝트에 맞게 빌드 결과물을 얻고 다음 단계를 진행하자.) 2. 만든 이미지를 실행해보기 프로젝트 최상위 디렉토리에 을 아래와 같은 내용으로생성하자. 그리고 빌드해보자. images 명령어로 docker이미지가 제대로 만들어 졌는지 확인한다. 드디어 Docker 이미지를 실행하는 순간이다. Dokcer…","frontmatter":{"date":"November 06, 2022","title":"Let’s Go Docker(실습편) - 어플리케이션을 Docker로 배포하기","categories":"infra","author":"주녁","emoji":"🔮"},"fields":{"slug":"/infra-learn-docker-basic-2/"}},"next":{"id":"856848bf-7237-501e-a187-3060a4b5ac79","html":"<p>지적과 댓글은 언제나 환영합니다!</p>\n<br/>\n<h1 id=\"변경사항을-docker로-자동-배포하기\" style=\"position:relative;\"><a href=\"#%EB%B3%80%EA%B2%BD%EC%82%AC%ED%95%AD%EC%9D%84-docker%EB%A1%9C-%EC%9E%90%EB%8F%99-%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0\" aria-label=\"변경사항을 docker로 자동 배포하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>변경사항을 Docker로 자동 배포하기</h1>\n<p>변경사항을 감지하고 배포하려면</p>\n<p>CI/CD 파이프라인 구축을 먼저 알아야한다.</p>\n<br>\n<p>CI/CD 파이프라인을 구축하는 방법은</p>\n<p>버전 관리 플랫폼별로 다르다.</p>\n<br>\n<p>대표적으로 Github Action, Gitlab, Terraform 등이 있으나</p>\n<p>Github Action으로 진행해보도록 하겠다.</p>\n<br>\n<hr>\n<h2 id=\"github-action을-이용한-cicd\" style=\"position:relative;\"><a href=\"#github-action%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-cicd\" aria-label=\"github action을 이용한 cicd permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Github Action을 이용한 CI/CD</h2>\n<br>\n<p>Github는 사용자가 CI/CD 도구를 직접 통합해야 한다.</p>\n<p>선택지로 Jenkins, CircleCI, TravisCI 등이 있다</p>\n<br>\n<p>필자는 현재 이 블로그도 Github Action으로 자동 배포하고 있다.</p>\n<p>그 때의 <a href=\"https://www.junwork.net/blog-build-deploy-2/\">빌드 스크립트</a>를 재활용해보자.</p>\n<p>자세한 설명은 주석을 참고하자.</p>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># 알아두기\n중간중간 보이는 secret들은 저장소 내 환경변수로,\nRepository 상단 Settings > Secrets에서 설정할 수 있다.</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> App Deployment <span class=\"token comment\"># 이 스크립트의 제목</span>\n\n<span class=\"token comment\"># 어떤 행동을 할때마다 실행할지</span>\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\"># master, release/v*라는 이름의 브랜치에 push가 발생할 때마다</span>\n  <span class=\"token comment\"># ex) release/v0.1, release/v2.1.5</span>\n  <span class=\"token key atrule\">push</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> master\n      <span class=\"token punctuation\">-</span> release/v*\n\n  <span class=\"token comment\"># feature, fix 브랜치에 pull_request가 발생할 때마다</span>\n  <span class=\"token key atrule\">pull_request</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> feature<span class=\"token punctuation\">-</span>*\n      <span class=\"token punctuation\">-</span> fix<span class=\"token punctuation\">-</span>*\n\n<span class=\"token comment\"># 실행할 작업을 순서대로 정의함</span>\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span>latest\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n    \n    <span class=\"token comment\"># 체크아웃</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> checkout\n      <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v3\n\n    <span class=\"token comment\"># JDK 설치</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Set up JDK 11\n      <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/setup<span class=\"token punctuation\">-</span>java@v3\n      <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">java-version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'11'</span>\n        <span class=\"token key atrule\">distribution</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'temurin'</span>\n\n    <span class=\"token comment\"># DB 설정 파일 생성</span>\n    <span class=\"token comment\"># 중요 정보는 Github Secret에서 복사해온다.</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> make application<span class=\"token punctuation\">-</span>database.yaml\n      <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n        # create application-database.yaml\n        cd ./src/main/resources</span>\n\n        <span class=\"token comment\"># application-database.yaml 파일 생성</span>\n        touch ./application<span class=\"token punctuation\">-</span>database.yaml\n\n        <span class=\"token comment\"># GitHub-Actions 에서 설정한 값을 application-database.yaml 파일에 쓰기</span>\n        echo \"$<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.DATABASE <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\" <span class=\"token punctuation\">></span><span class=\"token punctuation\">></span> ./application<span class=\"token punctuation\">-</span>database.yaml\n      <span class=\"token key atrule\">shell</span><span class=\"token punctuation\">:</span> bash\n\n    <span class=\"token comment\"># gradle 빌드</span>\n    <span class=\"token comment\"># maven 빌드 : mvn package</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Build with Gradle\n      <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> ./gradlew bootJar\n\n\n    <span class=\"token comment\"># 웹 이미지 빌드 및 도커허브에 push</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> web docker build and push\n      <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n        docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}\n        docker build -t ${{ secrets.DOCKER_REPO }}/second-eyes-web .\n        docker push ${{ secrets.DOCKER_REPO }}/second-eyes-web</span></code></pre></div>\n<p>위 스크립트를 Github Action을 통해 동작시키면</p>\n<p><code class=\"language-text\">빌드</code> -> <code class=\"language-text\">배포</code> -> <code class=\"language-text\">도커 이미지화</code>까지 한번에 처리할 수 있다.</p>\n<p>추가적으로 실행까지 하려면 아래 Docker Compose 스크립트를 추가하면 된다.</p>\n<p>Docker Compose의 개념이 생소할 수 있겠지만,</p>\n<p>실행 정보까지 추가해주는 것으로 생각하면 좋다.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\">    <span class=\"token comment\">## docker compose up</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> executing remote ssh commands using password\n      <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> appleboy/ssh<span class=\"token punctuation\">-</span>action@master\n      <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">host</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.HOST <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n        <span class=\"token key atrule\">username</span><span class=\"token punctuation\">:</span> ubuntu\n        <span class=\"token key atrule\">key</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> secrets.KEY <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n        <span class=\"token key atrule\">script</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n          sudo docker rm -f $(docker ps -qa)\n          sudo docker pull ${{ secrets.DOCKER_REPO }}/second-eyes-web\n          sudo docker pull ${{ secrets.DOCKER_REPO }}/second-eyes-nginx\n          docker-compose up -d\n          docker image prune -f</span></code></pre></div>\n<br>\n<br>\n<hr>\n<p><em>출처</em></p>\n<p><em><a href=\"https://devlog-wjdrbs96.tistory.com/361\">wjdrbs96님 블로그</a></em></p>\n<p><em><a href=\"https://stalker5217.netlify.app/devops/github-action-aws-ci-cd-1/\">stalker5217님 블로그</a></em></p>\n<p><em><a href=\"https://velog.io/@rmswjdtn/Spring-Docker-Github-Action-Spring-Boot-%EC%9E%90%EB%8F%99%EB%B0%B0%ED%8F%AC%ED%99%98%EA%B2%BD-%EB%A7%8C%EB%93%A4%EA%B8%B0\">rmswjdtn님 블로그</a></em></p>\n<br/>\n<hr>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#github-action%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-cicd\">Github Action을 이용한 CI/CD</a></li>\n</ul>\n</div>","frontmatter":{"date":"November 06, 2022","title":"Let’s Go Docker(심화편) - 변경사항을 Docker로 자동 배포하기","categories":"infra","author":"주녁","emoji":"🔮"},"fields":{"slug":"/infra-learn-docker-basic-3/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://www.junwork.net","comments":{"utterances":{"repo":"junwork123/blog-comments"}}}}},"pageContext":{"slug":"/infra-learn-docker-basic-2/","nextSlug":"/infra-learn-docker-basic-3/","prevSlug":""}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}