{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/knowledge-about-Cookie-and-Cache/",
    "result": {"data":{"cur":{"id":"b49134e5-4ef3-576a-b9e1-04698fa69316","html":"<p>지적과 댓글은 언제나 환영합니다!</p>\n<p><br/><br/></p>\n<h1 id=\"시작에-앞서\" style=\"position:relative;\"><a href=\"#%EC%8B%9C%EC%9E%91%EC%97%90-%EC%95%9E%EC%84%9C\" aria-label=\"시작에 앞서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>시작에 앞서</h1>\n<p>이야기를 하기 전, 탄생 배경에 대해 알고가면 더욱 좋다.</p>\n<p>HTTP 프로토콜은 <code class=\"language-text\">비연결성(Connectionless)</code>, <code class=\"language-text\">무상태성(Stateless)</code>을 가지기 때문에\n클라이언트가 누구인지 저장하지 않는다.\n때문에 <u>매 요청마다 사용자, 권한 등을 확인해야 한다.</u></p>\n<p>이러한 특성을 보완하기 위해서 쿠키, 캐시와 같은 개념이 등장헀다.</p>\n<br/>\n<hr>\n<h2 id=\"쿠키cookie\" style=\"position:relative;\"><a href=\"#%EC%BF%A0%ED%82%A4cookie\" aria-label=\"쿠키cookie permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>쿠키(Cookie)</strong></h2>\n<p>쿠키는 <code class=\"language-text\">사용자의 브라우저에 저장</code>되고, <code class=\"language-text\">HTTP 헤더에 포함</code>되는 <code class=\"language-text\">텍스트 데이터 파일</code>이다.</p>\n<p>쿠키는 아래와 같이 <code class=\"language-text\">1개의 데이터쌍</code>과 <code class=\"language-text\">4개의 속성</code>으로 구성되어 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">Set-Cookie</span><span class=\"token punctuation\">:</span> name=value; expires=<span class=\"token punctuation\">[</span>Date<span class=\"token punctuation\">]</span>; domain=<span class=\"token punctuation\">[</span>Domain<span class=\"token punctuation\">]</span>; path=<span class=\"token punctuation\">[</span>Path<span class=\"token punctuation\">]</span>; <span class=\"token punctuation\">[</span>Secure<span class=\"token punctuation\">]</span>\n</code></pre></div>\n<ul>\n<li><code class=\"language-text\">expires</code> : 쿠키의 유효기간, 유효기간이 지나면 파일이 남더라도 브라우저에서 읽을 수 없다.</li>\n<li><code class=\"language-text\">domain</code> : 쿠키를 전송할 도메인, 하나의 도메인 당 20개의 값만 가질 수 있다.</li>\n<li><code class=\"language-text\">path</code> = 쿠키를 전송할 경로, 경로를 <code class=\"language-text\">/</code>로 설정하면 모든페이지에서, <code class=\"language-text\">/example</code>로 설정하면 그 페이지 이하의 페이지에서 읽을 수 있다.</li>\n<li><code class=\"language-text\">secure</code> : 쿠키를 전송할 보안 전송 방법, 그러나 쿠키는 위험하지 않은 데이터를 전달하기 때문에 잘 사용하지 않는다.</li>\n</ul>\n<br>\n<h3 id=\"그렇다면-쿠키는-언제-생성될까\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%A0%87%EB%8B%A4%EB%A9%B4-%EC%BF%A0%ED%82%A4%EB%8A%94-%EC%96%B8%EC%A0%9C-%EC%83%9D%EC%84%B1%EB%90%A0%EA%B9%8C\" aria-label=\"그렇다면 쿠키는 언제 생성될까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>그렇다면 쿠키는 언제 생성될까?</strong></h3>\n<p>답은 <u>클라이언트가 페이지에 접속할 때, 서버에서 HTTP 헤더에 쿠키를 포함시켜 응답한다.</u></p>\n<p>클라이언트 측에서는 만료기간까지 보관하고 있다가, 같은 요청이 발생하면 쿠키를 함께 서버에 보낸다. 만약, 변경이 필요하다면 쿠키를 업데이트하여 응답한다.</p>\n<br>\n<h3 id=\"쿠키의-예시\" style=\"position:relative;\"><a href=\"#%EC%BF%A0%ED%82%A4%EC%9D%98-%EC%98%88%EC%8B%9C\" aria-label=\"쿠키의 예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>쿠키의 예시</strong></h3>\n<br>\n<p><code class=\"language-text\">장바구니</code></p>\n<p><code class=\"language-text\">팝업 다시보지 않기</code></p>\n<p><code class=\"language-text\">ID/PW 기억하기</code></p>\n<br>\n<hr>\n<h2 id=\"세션session\" style=\"position:relative;\"><a href=\"#%EC%84%B8%EC%85%98session\" aria-label=\"세션session permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>세션(Session)</strong></h2>\n<p>왜 쿠키 다음에 세션을 소개할까?</p>\n<p>그 이유는 바로 세션이 <code class=\"language-text\">서버에 저장되는 쿠키</code>이기 때문이다.</p>\n<p>세션은 클라이언트가 <code class=\"language-text\">브라우저를 종료할 때까지 유지</code>된다.\n그렇기 때문에 클라이언트를 구별하기 위한 <code class=\"language-text\">고유 세션 ID를 부여</code>한다.\n또한, 클라이언트가 일정시간 응답이 없다면 유지되지 않도록 할 수 있다.</p>\n<p><code class=\"language-text\">서버에 직접 저장</code>되므로 보안성이 높다.\n하지만 서버의 메모리에 영향을 주기 때문에 <code class=\"language-text\">성능 저하의 요인</code>이 될 수 있다.</p>\n<br>\n<h3 id=\"그렇다면-세션은-언제-생성될까\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%A0%87%EB%8B%A4%EB%A9%B4-%EC%84%B8%EC%85%98%EC%9D%80-%EC%96%B8%EC%A0%9C-%EC%83%9D%EC%84%B1%EB%90%A0%EA%B9%8C\" aria-label=\"그렇다면 세션은 언제 생성될까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>그렇다면 세션은 언제 생성될까?</strong></h3>\n<p>세션은 클라이언트가 <u>서버에 접속할 때, 서버는 고유 세션 ID를 발급하고 저장</u>한다.</p>\n<p>클라이언트는 서버에 요청할 때, 이 세션 ID를 같이 전달한다.</p>\n<p>전달받은 세션은 별다른 작업을 요구하지 않지만, 클라이언트의 정보를 담고 있다.</p>\n<br>\n<h3 id=\"세션의-예시\" style=\"position:relative;\"><a href=\"#%EC%84%B8%EC%85%98%EC%9D%98-%EC%98%88%EC%8B%9C\" aria-label=\"세션의 예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>세션의 예시</strong></h3>\n<br>\n<p><code class=\"language-text\">로그아웃 전까지 로그인 유지</code></p>\n<br>\n<hr>\n<h2 id=\"캐시cache\" style=\"position:relative;\"><a href=\"#%EC%BA%90%EC%8B%9Ccache\" aria-label=\"캐시cache permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>캐시(Cache)</strong></h2>\n<p>캐시는 쿠키, 세션과는 역할이 조금 다르다.</p>\n<p>캐시는 이미지, 오디오, 소스코드, CSS 등 <code class=\"language-text\">접근 비용이 비싼 데이터를 저장</code>해두었다가, 동일한 요청이 있을 때 <code class=\"language-text\">재요청하지 않고 데이터를 제공</code>할 수 있게 하는 <code class=\"language-text\">임시 저장소</code>이다.</p>\n<p>로고나 버튼이미지, 검색창 같이 <code class=\"language-text\">다시 사용될 가능성이 높은 요소</code>를 캐시로 저장하면 서버의 부하(Load), 대역폭의 부담을 줄이고, 최종적으로 <code class=\"language-text\">사용자에게 전달하는 속도를 높일 수 있다.</code></p>\n<p>다시 사용될 가능성이 높은 요소를 선정했기 때문에 항상 캐시가 사용되지 않는다. 따라서 리소스 요청이 이전에 왔던 것과 같은 게 있다면, <code class=\"language-text\">캐시 적중(Cache Hit)</code>, 웹서버로 처음 요청된 리소스라면, <code class=\"language-text\">캐시 부적중(Cache Miss)</code>라고 한다.</p>\n<br>\n<p>한편, 한번 캐시에 저장되면 서버에서 변경해도, 사용자는 변경되지 않은 것처럼 보일 수 있다.\n로고나 이미지가 바뀐것을 어떻게 알 수 있을까?</p>\n<h3 id=\"그렇다면-캐시는-언제-생성될까\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%A0%87%EB%8B%A4%EB%A9%B4-%EC%BA%90%EC%8B%9C%EB%8A%94-%EC%96%B8%EC%A0%9C-%EC%83%9D%EC%84%B1%EB%90%A0%EA%B9%8C\" aria-label=\"그렇다면 캐시는 언제 생성될까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>그렇다면 캐시는 언제 생성될까?</strong></h3>\n<p>캐시는 아래 7단계를 거쳐 생성된다.</p>\n<p><code class=\"language-text\">요청받기</code> > <code class=\"language-text\">파싱</code> > <code class=\"language-text\">검색</code> > <code class=\"language-text\">신선도검사</code> > <code class=\"language-text\">응답생성</code> > <code class=\"language-text\">전송</code> > <code class=\"language-text\">로깅</code></p>\n<br>\n<ol>\n<li>\n<p><code class=\"language-text\">요청받기</code> : 클라이언트에서 네트워크 연결이 시작되면 요청 데이터를 읽어들인다.</p>\n</li>\n<li>\n<p><code class=\"language-text\">파싱</code> : 요청 메시지를 캐싱 소프트웨어를 이용해 헤더 부분을 자료구조에 담는다(ex. dictionary)</p>\n</li>\n<li>\n<p><code class=\"language-text\">검색</code> : 요청 URL에 해당하는 로컬 사본을 검색한다. 사본의 위치는 메모리, 디스크, 로컬 컴퓨터 등 다양한 위치가 될 수 있다.</p>\n</li>\n<li>\n<p><code class=\"language-text\">신선도 검사</code> : 캐시가 적중(Hit)한 경우, <a href=\"https://feel5ny.github.io/2019/10/05/HTTP_007-2/#algorithm\">신선도 검사 알고리즘</a>을 통해 캐시가 유효한지 검사한다.</p>\n</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\">$충분히_신선한가 = $나이 &lt; $신선도_수명</code></pre></div>\n<ul>\n<li>\n<p>$나이 : 서버가 문서를 보낸 후(혹은 서버가 마지막으로 재검사한 후) 그 문서가 나이를 먹은 시간의 총합이다.</p>\n</li>\n<li>\n<p>$신선도_수명 : 서버와 클라이언트의 제약조건에 의존한다. 일반적으로 서버는 얼마나 자주 발행되었는지에 대한 정보를, 클라이언트는 최신 콘텐츠에 대한 요구를 제약조건으로 설정한다.</p>\n</li>\n</ul>\n<br>\n<ol start=\"5\">\n<li>\n<p><code class=\"language-text\">응답 생성</code> : 캐시가 신선하다면, 캐시의 오래된 헤더에 <code class=\"language-text\">신선도 정보(Cache-Control, Age, Expires 헤더)를 삽입</code>한다. Date 헤더는 최초 생성 정보이기 때문에 수정하면 안된다.</p>\n</li>\n<li>\n<p><code class=\"language-text\">전송</code> :</p>\n</li>\n<li>\n<p><code class=\"language-text\">로깅</code> : 캐시 전송 후 캐시 Hit, Miss에 대한 통계를 작성하고, 로그 파일에 요청 종류, URL, 작업 내용을 기록한다.</p>\n</li>\n</ol>\n<br>\n<hr>\n<h2 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리</h2>\n<p>자, 이제 쿠키, 세션, 캐시에 대해 설명할 수 있는가?</p>\n<p>쿠키와 세션, 캐시 모두 적절히 사용하면 약이 되지만, 과하게 의존한다면 독이 될 수 있다.</p>\n<p>다음에는 인증과 인가, JWT에 대한 내용을 다뤄보겠다.</p>\n<p><br/><br/></p>\n<p><em>출처</em></p>\n<p><em><a href=\"https://interconnection.tistory.com/74\">RyanGomdoriPooh님 블로그</a></em></p>\n<p><em><a href=\"https://ychcom.tistory.com/entry/%EC%BF%A0%ED%82%A4Cookie%EB%9E%80\">ychcom님 블로그</a></em></p>\n<p><em><a href=\"https://feel5ny.github.io/2019/10/05/HTTP_007-2/#algorithm\">feel5ny님 블로그</a></em></p>\n<br/>\n<hr>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EC%BF%A0%ED%82%A4cookie\"><strong>쿠키(Cookie)</strong></a></p>\n<ul>\n<li><a href=\"#%EA%B7%B8%EB%A0%87%EB%8B%A4%EB%A9%B4-%EC%BF%A0%ED%82%A4%EB%8A%94-%EC%96%B8%EC%A0%9C-%EC%83%9D%EC%84%B1%EB%90%A0%EA%B9%8C\"><strong>그렇다면 쿠키는 언제 생성될까?</strong></a></li>\n<li><a href=\"#%EC%BF%A0%ED%82%A4%EC%9D%98-%EC%98%88%EC%8B%9C\"><strong>쿠키의 예시</strong></a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%84%B8%EC%85%98session\"><strong>세션(Session)</strong></a></p>\n<ul>\n<li><a href=\"#%EA%B7%B8%EB%A0%87%EB%8B%A4%EB%A9%B4-%EC%84%B8%EC%85%98%EC%9D%80-%EC%96%B8%EC%A0%9C-%EC%83%9D%EC%84%B1%EB%90%A0%EA%B9%8C\"><strong>그렇다면 세션은 언제 생성될까?</strong></a></li>\n<li><a href=\"#%EC%84%B8%EC%85%98%EC%9D%98-%EC%98%88%EC%8B%9C\"><strong>세션의 예시</strong></a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%BA%90%EC%8B%9Ccache\"><strong>캐시(Cache)</strong></a></p>\n<ul>\n<li><a href=\"#%EA%B7%B8%EB%A0%87%EB%8B%A4%EB%A9%B4-%EC%BA%90%EC%8B%9C%EB%8A%94-%EC%96%B8%EC%A0%9C-%EC%83%9D%EC%84%B1%EB%90%A0%EA%B9%8C\"><strong>그렇다면 캐시는 언제 생성될까?</strong></a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\">마무리</a></p>\n</li>\n</ul>\n</div>","excerpt":"지적과 댓글은 언제나 환영합니다!  시작에 앞서 이야기를 하기 전, 탄생 배경에 대해 알고가면 더욱 좋다. HTTP 프로토콜은 , 을 가지기 때문에\n클라이언트가 누구인지 저장하지 않는다.\n때문에 매 요청마다 사용자, 권한 등을 확인해야 한다. 이러한 특성을 보완하기 위해서 쿠키, 캐시와 같은 개념이 등장헀다. 쿠키(Cookie) 쿠키는 되고, 되는 이다. 쿠키는 아래와 같이 과 으로 구성되어 있다.  : 쿠키의 유효기간, 유효기간이 지나면 파일이 남더라도 브라우저에서 읽을 수 없다.  : 쿠키를 전송할 도메인, 하나의 도메인 당 20개의 값만 가질 수 있다.  = 쿠키를 전송할 경로, 경로를 로 설정하면 모든페이지에서, 로 설정하면 그 페이지 이하의 페이지에서 읽을 수 있다.  : 쿠키를 전송할 보안 전송 방법, 그러나 쿠키는 위험하지 않은 데이터를 전달하기 때문에 잘 사용하지 않는다. 그렇다면 쿠키는 언제 생성될까? 답은 클라이언트가 페이지에 접속할 때, 서버에서 HTTP 헤더에…","frontmatter":{"date":"September 17, 2022","title":"쿠키(Cookie)와 캐시(Cache), 세션(Session)의 차이를 아시나요?","categories":"knowledge","author":"주녁","emoji":"🔮"},"fields":{"slug":"/knowledge-about-Cookie-and-Cache/"}},"next":{"id":"a2f351f7-d19d-5ab0-8d48-4e95b863edb1","html":"<p>지적과 댓글은 언제나 환영합니다!</p>\n<h2 id=\"index\" style=\"position:relative;\"><a href=\"#index\" aria-label=\"index permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>INDEX</h2>\n<p><a href=\"#string\">1. 문자열 관련</a></p>\n<p><a href=\"#collection\">2. Collection 관련</a></p>\n<p><a href=\"#cast\">3. 형 변환 관련</a></p>\n<p><a href=\"#regex\">4. 정규표현식 관련</a></p>\n<p><a href=\"#useful\">5. 유용한 함수</a></p>\n<p><br/><br/></p>\n<hr>\n<h2 id=\"문자열-관련span-idstringspan\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%9E%90%EC%97%B4-%EA%B4%80%EB%A0%A8span-idstringspan\" aria-label=\"문자열 관련span idstringspan permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문자열 관련<span id=\"string\"></span></h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 분자열 분리</span>\n<span class=\"token class-name\">StringTokenizer</span> st<span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringTokenizer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"문자열 입니다\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">nextToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"문자열\"</span>\n<span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"문\", \"자\", \"열\"]</span></code></pre></div>\n<br>\n<hr>\n<h2 id=\"collection-관련span-idcollectionspan\" style=\"position:relative;\"><a href=\"#collection-%EA%B4%80%EB%A0%A8span-idcollectionspan\" aria-label=\"collection 관련span idcollectionspan permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Collection 관련<span id=\"collection\"></span></h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">/* Header Library */</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Collection</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HashMap</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Set</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 급할떄만 쓰자</span>\n\n<span class=\"token comment\">/* Array */</span>\n    <span class=\"token comment\">// 선언</span>\n    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> _arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 합계</span>\n    <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\n    <span class=\"token comment\">// 출력</span>\n    <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">deepToString</span><span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 복사</span>\n    <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOfRange</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 중복제거</span>\n    <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">A</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">distinct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* List */</span>\n    <span class=\"token comment\">// 중복제거</span>\n    list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">distinct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 정렬        </span>\n    <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 오름차순        </span>\n    <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">reverseOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 내림차순    </span>\n    <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span>CASE_INSENSITIVE_ORDER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 오름차순 (대소문자 구분X)</span>\n\n    <span class=\"token comment\">// 최대, 최소</span>\n    <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* HashMap */</span>\n    <span class=\"token comment\">// 순회</span>\n    hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br>\n<hr>\n<h2 id=\"형-변환-관련span-idcastspan\" style=\"position:relative;\"><a href=\"#%ED%98%95-%EB%B3%80%ED%99%98-%EA%B4%80%EB%A0%A8span-idcastspan\" aria-label=\"형 변환 관련span idcastspan permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>형 변환 관련<span id=\"cast\"></span></h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">/* 기본형 변환 */</span>\n    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"10\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 문자 → 숫자(10진수)</span>\n    <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"10\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 문자 → 숫자(16진수)</span>\n    <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">getNumericValue</span><span class=\"token punctuation\">(</span><span class=\"token char\">'10'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// char → 숫자</span>\n\n    <span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 숫자 → 문자(10진수)</span>\n    \n    <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> charArr <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 문자열 → 배열</span>\n\n<span class=\"token comment\">/* 리스트 → 배열 */</span>\n    <span class=\"token class-name\">String</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n        <span class=\"token comment\">// new String[0] : 같은 크기, </span>\n        <span class=\"token comment\">// new String[list.size()+1] : null로 채워서 append</span>\n\n<span class=\"token comment\">/* String 배열 → 리스트 */</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 새로운 객체를 생성</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 스트림 사용</span>\n        <span class=\"token comment\">// Arrays.asList(arr) : 원본 배열을 참조하는 리스트 반환(같이 변경됨)</span>\n\n<span class=\"token comment\">/* int 배열 → 리스트 ★★★ */</span>\n    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 반복문 사용</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> intList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        \n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> item <span class=\"token operator\">:</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        intList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        \n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 스트림 사용</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> intList <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span>\n                                <span class=\"token punctuation\">.</span><span class=\"token function\">boxed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>                        \n                                <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br>\n<br>\n<hr>\n<h2 id=\"정규표현식-괸련span-idregexspan\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EA%B7%9C%ED%91%9C%ED%98%84%EC%8B%9D-%EA%B4%B8%EB%A0%A8span-idregexspan\" aria-label=\"정규표현식 괸련span idregexspan permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정규표현식 괸련<span id=\"regex\"></span></h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> pattern <span class=\"token operator\">=</span> <span class=\"token string\">\"^[0-9]*$\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//숫자만</span>\n<span class=\"token class-name\">String</span> val <span class=\"token operator\">=</span> <span class=\"token string\">\"123456789\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//대상문자열</span>\n\n<span class=\"token keyword\">boolean</span> regex <span class=\"token operator\">=</span> <span class=\"token class-name\">Pattern</span><span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3 id=\"code-classlanguage-textpatterncode-클래스-주요-메서드\" style=\"position:relative;\"><a href=\"#code-classlanguage-textpatterncode-%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%A3%BC%EC%9A%94-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-label=\"code classlanguage textpatterncode 클래스 주요 메서드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">Pattern</code> 클래스 주요 메서드</h3>\n<br>\n<p><code class=\"language-text\">compile(String regex)</code> : 주어진 정규표현식으로부터 패턴을 만듭니다.</p>\n<p><code class=\"language-text\">matcher(CharSequence input)</code> : 대상 문자열이 패턴과 일치할 경우 true를 반환합니다.</p>\n<p><code class=\"language-text\">asPredicate()</code> : 문자열을 일치시키는 데 사용할 수있는 술어를 작성합니다.</p>\n<p><code class=\"language-text\">pattern()</code> : 컴파일된 정규표현식을 String 형태로 반환합니다.</p>\n<p><code class=\"language-text\">split(CharSequence input)</code> : 문자열을 주어진 인자값 CharSequence 패턴에 따라 분리합니다.</p>\n<br>\n<hr>\n<h3 id=\"code-classlanguage-textpartterncode-플래그-값-사용상수\" style=\"position:relative;\"><a href=\"#code-classlanguage-textpartterncode-%ED%94%8C%EB%9E%98%EA%B7%B8-%EA%B0%92-%EC%82%AC%EC%9A%A9%EC%83%81%EC%88%98\" aria-label=\"code classlanguage textpartterncode 플래그 값 사용상수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">Parttern</code> 플래그 값 사용(상수)</h3>\n<br>\n<p><code class=\"language-text\">Pattern.CANON_EQ</code> : None표준화된 매칭 모드를 활성화합니다.</p>\n<p><code class=\"language-text\">Pattern.CASE_INSENSITIVE</code> : 대소문자를 구분하지 않습니다.</p>\n<p><code class=\"language-text\">Pattern.COMMENTS</code> : 공백과 #으로 시작하는 주석이 무시됩니다. (라인의 끝까지).</p>\n<p><code class=\"language-text\">Pattern.MULTILINE</code> : 수식 ‘^’ 는 라인의 시작과, ‘$’ 는 라인의 끝과 match 됩니다.</p>\n<p><code class=\"language-text\">Pattern.DOTALL</code> : 수식 ‘.’과 모든 문자와 match 되고 ‘\\n’ 도 match 에 포함됩니다.</p>\n<p><code class=\"language-text\">Pattern.UNICODE_CASE</code> : 유니코드를 기준으로 대소문자 구분 없이 match 시킵니다.</p>\n<p><code class=\"language-text\">Pattert.UNIX_LINES</code> : 수식 ‘.’ 과 ‘^’ 및 ‘$’의 match시에 한 라인의 끝을 의미하는 ‘\\n’만 인식됩니다.</p>\n<br>\n<hr>\n<h3 id=\"정규표현식-문법\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EA%B7%9C%ED%91%9C%ED%98%84%EC%8B%9D-%EB%AC%B8%EB%B2%95\" aria-label=\"정규표현식 문법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정규표현식 문법</h3>\n<br>\n<p>[Jj]ava : Java 혹은 java</p>\n<p>[^aeiou] : 소문자 모음 제외</p>\n<p>^abc : abc로 시작해야함</p>\n<p>xyz$ : xyz로 종료되어야함</p>\n<p>\\d{3} : 숫자가 3개 있어야 함</p>\n<p>\\d+ : 숫자가 1개 이상</p>\n<p>\\d? : 숫자가 1개던지 없던지</p>\n<p>반복횟수</p>\n<ul>\n<li>: 0회 이상 반복</li>\n</ul>\n<ul>\n<li>: 1회 이상 반복</li>\n</ul>\n<p>? : 0회 or 1회</p>\n<p>{m} : m회 반복</p>\n<p>{m,n} : m회에서 n회까지 반복</p>\n<p>{m,} : m회 이상</p>\n<p>매칭조건 . : 줄바꿈 문자를 제외한 모든 문자와 매치됨</p>\n<p>^ : 문자열의 시작과 매치</p>\n<p>$ : 문자열의 마지막과 매치</p>\n<p>[] : 문자 집합 중 하나 ex : [0-9]</p>\n<p>| : 또는(or)을 의미</p>\n<p>{} : 정규식을 그룹으로 묶음</p>\n<p>이스케이프 기호 \\ : 역슬래쉬 문자 자체</p>\n<p>\\d : 모든 숫자 [0-9]</p>\n<p>\\D : 숫자가 아닌 문자 [^0-9]</p>\n<p>\\w : 숫자 또는 문자와 매치됨</p>\n<p>\\W : 숫자 또는 문자가 아닌 것과 매치됨</p>\n<p>\\b : 단어(숫자, 영문자의 연속)의 경계</p>\n<p>\\B : 단어(숫자, 영문자의 연속)의 경계가 아닌 것</p>\n<br>\n<hr>\n<h2 id=\"유용한-함수span-idusefulspan\" style=\"position:relative;\"><a href=\"#%EC%9C%A0%EC%9A%A9%ED%95%9C-%ED%95%A8%EC%88%98span-idusefulspan\" aria-label=\"유용한 함수span idusefulspan permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>유용한 함수<span id=\"useful\"></span></h2>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">\n<span class=\"token comment\">/* Graph 생성 */</span>\n    <span class=\"token comment\">// 단 방향 [출발노드,도착노드] 가 주어졌을 때</span>\n    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> list<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 인접리스트 초기화</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 양방향 인접리스트</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> start<span class=\"token operator\">=</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<br>\n<hr>\n<p><em>출처</em></p>\n<p><em><a href=\"https://gwang920.github.io/java/Java-condingGrammer/\">gwang920님 블로그</a></em></p>\n<p><em><a href=\"https://hianna.tistory.com/551\">hianna님 블로그</a></em></p>\n<p><em><a href=\"https://velog.io/@hygge/Java-%EC%BD%94%EB%94%A9%ED%85%8C%EC%8A%A4%ED%8A%B8-%EB%AC%B8%EB%B2%95-%EC%86%8D%EC%84%B1-%EC%A0%95%EB%A6%AC\">hygge님 블로그</a></em></p>\n<br/>\n<hr>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#index\">INDEX</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%AC%B8%EC%9E%90%EC%97%B4-%EA%B4%80%EB%A0%A8span-idstringspan\">문자열 관련<span id=\"string\"></span></a></p>\n</li>\n<li>\n<p><a href=\"#collection-%EA%B4%80%EB%A0%A8span-idcollectionspan\">Collection 관련<span id=\"collection\"></span></a></p>\n</li>\n<li>\n<p><a href=\"#%ED%98%95-%EB%B3%80%ED%99%98-%EA%B4%80%EB%A0%A8span-idcastspan\">형 변환 관련<span id=\"cast\"></span></a></p>\n</li>\n<li>\n<p><a href=\"#%EC%A0%95%EA%B7%9C%ED%91%9C%ED%98%84%EC%8B%9D-%EA%B4%B8%EB%A0%A8span-idregexspan\">정규표현식 괸련<span id=\"regex\"></span></a></p>\n<ul>\n<li><a href=\"#pattern-%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%A3%BC%EC%9A%94-%EB%A9%94%EC%84%9C%EB%93%9C\"><code class=\"language-text\">Pattern</code> 클래스 주요 메서드</a></li>\n<li><a href=\"#parttern-%ED%94%8C%EB%9E%98%EA%B7%B8-%EA%B0%92-%EC%82%AC%EC%9A%A9%EC%83%81%EC%88%98\"><code class=\"language-text\">Parttern</code> 플래그 값 사용(상수)</a></li>\n<li><a href=\"#%EC%A0%95%EA%B7%9C%ED%91%9C%ED%98%84%EC%8B%9D-%EB%AC%B8%EB%B2%95\">정규표현식 문법</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%9C%A0%EC%9A%A9%ED%95%9C-%ED%95%A8%EC%88%98span-idusefulspan\">유용한 함수<span id=\"useful\"></span></a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"September 16, 2022","title":"Java 문법 정리","categories":"how-to","author":"주녁","emoji":"🔮"},"fields":{"slug":"/How-to-use-java/"}},"prev":{"id":"d33978b6-42dc-5f40-970b-156814129346","html":"<p>지적과 댓글은 언제나 환영합니다!</p>\n<p><br/><br/></p>\n<p>Spring으로 개발을 하다보면 @Bean과 @Component를 언제 써야할지 헷갈릴때가 있다.</p>\n<p>둘다 Bean을 생성할때 사용하는 어노테이션인데 왜 2개로 나누어져있을까?</p>\n<br>\n<hr>\n<h2 id=\"bean의-정의와-용도\" style=\"position:relative;\"><a href=\"#bean%EC%9D%98-%EC%A0%95%EC%9D%98%EC%99%80-%EC%9A%A9%EB%8F%84\" aria-label=\"bean의 정의와 용도 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@Bean의 정의와 용도</h2>\n<br>\n<p>@Bean의 용도를 한줄로 요약하자면,</p>\n<p>개발자가 컨트롤이 불가능한 <code class=\"language-text\">외부 라이브러리들을 Bean으로 등록</code>하고 싶은 경우에 사용된다.</p>\n<br>\n<p><code class=\"language-text\">Bean.java</code>의 documentation을 보면, 아래와 같은 문장이 가장 처음써있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Indicates that a method produces a bean to be managed by the Spring container.</code></pre></div>\n<p>그렇다.</p>\n<p>스프링 컨테이너에 의해 관리되는 Bean들을 생성하는 <code class=\"language-text\">method</code>에 사용할 수 있는 어노테이션이다.</p>\n<br>\n<p>실제 정의를 살펴보면 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>METHOD<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>ANNOTATION_TYPE<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Documented</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">Bean</span> <span class=\"token punctuation\">{</span></code></pre></div>\n<br>\n<p>타겟에 <code class=\"language-text\">method</code>에만 적용할 수 있도록 명시되어 있다.</p>\n<p>떄문에 직접 작성한 <code class=\"language-text\">class</code>에는 사용할 수 없는 것이다.</p>\n<br>\n<p>그렇기 때문에 외부 라이브러리를 bean으로 사용하고 싶을 때 <code class=\"language-text\">@Configuration</code> 클래스 안에 <code class=\"language-text\">@bean</code>을 사용하여 생성 메소드를 작성하는 것이다.</p>\n<p><br><br></p>\n<p>그렇다면 <code class=\"language-text\">class</code>에도 사용할 수 있는 어노테이션이 있지 않을까?</p>\n<p><code class=\"language-text\">@Component</code>가 바로 그렇다.</p>\n<br>\n<hr>\n<h2 id=\"component\" style=\"position:relative;\"><a href=\"#component\" aria-label=\"component permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@Component</h2>\n<br>\n<p><code class=\"language-text\">@Component</code>는 <code class=\"language-text\">class</code>를 bean으로 사용할 수 있도록 해주는 어노테이션이다.</p>\n<p>아래는 <code class=\"language-text\">Component.java</code>에 나오는 원문이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Indicates that an annotated class is a \"component\". Such classes are considered as candidates for auto-detection when using annotation-based configuration and classpath scanning.\nOther class-level annotations may be considered as identifying a component as well, typically a special kind of component: e.g. the @Repository annotation or AspectJ's @Aspect annotation.</code></pre></div>\n<br>\n<p>해석하자면, <u>어노테이션 기반의 configuration에 후보로 등록</u>되도록 해준다.</p>\n<p>또한 다른 클래스 레벨의 어노테이션(ex : <code class=\"language-text\">@Controller</code>, <code class=\"language-text\">@Repository</code>, <code class=\"language-text\">@Service</code>)도 그런 역할을 할 수 있도록 해준다.</p>\n<p>우리가 Spring을 공부하며 배운 내용 그대로가 적혀있다.</p>\n<br>\n<p>실제 정의를 살펴보면 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>TYPE<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Documented</span>\n<span class=\"token annotation punctuation\">@Indexed</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span></code></pre></div>\n<br>\n<p>class에 적용할 수 있도록 타겟이 <code class=\"language-text\">TYPE</code> 형태로 지정되어 있다.</p>\n<p>따라서 직접 만든 클래스에 사용이 가능하다.</p>\n<br>\n<p>다만, <code class=\"language-text\">@Bean</code>과 차이점으로 <code class=\"language-text\">@Indexed</code>라는 어노테이션이 설정되어 있는 것을 볼 수있다.</p>\n<br>\n<p><code class=\"language-text\">@Indexed</code>는 <code class=\"language-text\">@Component</code>어노테이션과 같이 사용되는데, 컴파일 시점에 <code class=\"language-text\">@Component</code> 어노테이션이 검색될 수 있도록 완전정규화된 이름을 부여해주는 역할을 한다.</p>\n<details>\n    <summary>원문 참조</summary>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">The CandidateComponentsIndex is an alternative to classpath scanning that uses a metadata file generated at compilation time. The index allows retrieving the candidate components (i.e. fully qualified name) based on a stereotype. This annotation instructs the generator to index the element on which the annotated element is present or if it implements or extends from the annotated element. The stereotype is the fully qualified name of the annotated element.\n\nConsider the default Component annotation that is meta-annotated with this annotation. If a component is annotated with Component, an entry for that component will be added to the index using the org.springframework.stereotype.Component stereotype.</code></pre></div>\n</details>\n<br>\n<hr>\n<h2 id=\"마치며\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"마치며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치며..</h2>\n<br>\n<p>자, 이제 <code class=\"language-text\">@Bean</code>과 <code class=\"language-text\">@Component</code>의 차이점에 대해 설명할 수 있는가?</p>\n<p>용도에 맞는 어노테이션 사용도 중요하지만,</p>\n<p>정의를 직접 찾아보고 해석해보는 것도 좋은 경험이 될 것이다.</p>\n<br/>\n<h2 id=\"불변\" style=\"position:relative;\"><a href=\"#%EB%B6%88%EB%B3%80\" aria-label=\"불변 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>불변</strong></h2>\n<p><em>출처</em></p>\n<p><em><a href=\"https://jojoldu.tistory.com/27\">jojoldu님 블로그</a></em></p>\n<p><em><a href=\"https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81-mvc-1#\">인프런 스프링 MVC 강의 1편</a></em></p>\n<p><em><a href=\"https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81-%ED%95%B5%EC%8B%AC-%EC%9B%90%EB%A6%AC-%EA%B8%B0%EB%B3%B8%ED%8E%B8/\">인프런 스프링 핵심 원리 기본편</a></em></p>\n<br/>\n<hr>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#bean%EC%9D%98-%EC%A0%95%EC%9D%98%EC%99%80-%EC%9A%A9%EB%8F%84\">@Bean의 정의와 용도</a></li>\n<li><a href=\"#component\">@Component</a></li>\n<li><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\">마치며..</a></li>\n<li><a href=\"#%EB%B6%88%EB%B3%80\"><strong>불변</strong></a></li>\n</ul>\n</div>","frontmatter":{"date":"September 19, 2022","title":"스프링 @Bean과 @Component의 차이점을 아시나요?","categories":"Spring","author":"주녁","emoji":"🔮"},"fields":{"slug":"/Spring-Learn-Bean-And-Component/"}},"site":{"siteMetadata":{"siteUrl":"https://www.junwork.net","comments":{"utterances":{"repo":"junwork123/blog-comments"}}}}},"pageContext":{"slug":"/knowledge-about-Cookie-and-Cache/","nextSlug":"/How-to-use-java/","prevSlug":"/Spring-Learn-Bean-And-Component/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}