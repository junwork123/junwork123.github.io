{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/about-Cookie-and-Cache/",
    "result": {"data":{"cur":{"id":"d993b6dc-2eb3-5e34-90f7-3cffc7018922","html":"<p>지적과 댓글은 언제나 환영합니다!</p>\n<p><br/><br/></p>\n<h1 id=\"시작에-앞서\" style=\"position:relative;\"><a href=\"#%EC%8B%9C%EC%9E%91%EC%97%90-%EC%95%9E%EC%84%9C\" aria-label=\"시작에 앞서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>시작에 앞서</h1>\n<p>이야기를 하기 전, 탄생 배경에 대해 알고가면 더욱 좋다.</p>\n<p>HTTP 프로토콜은 <code class=\"language-text\">비연결성(Connectionless)</code>, <code class=\"language-text\">무상태성(Stateless)</code>을 가지기 때문에\n클라이언트가 누구인지 저장하지 않는다.\n때문에 <u>매 요청마다 사용자, 권한 등을 확인해야 한다.</u></p>\n<p>이러한 특성을 보완하기 위해서 쿠키, 캐시와 같은 개념이 등장헀다.</p>\n<br/>\n<hr>\n<h2 id=\"쿠키cookie\" style=\"position:relative;\"><a href=\"#%EC%BF%A0%ED%82%A4cookie\" aria-label=\"쿠키cookie permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>쿠키(Cookie)</strong></h2>\n<p>쿠키는 <code class=\"language-text\">사용자의 브라우저에 저장</code>되고, <code class=\"language-text\">HTTP 헤더에 포함</code>되는 <code class=\"language-text\">텍스트 데이터 파일</code>이다.</p>\n<p>쿠키는 아래와 같이 <code class=\"language-text\">1개의 데이터쌍</code>과 <code class=\"language-text\">4개의 속성</code>으로 구성되어 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">Set-Cookie</span><span class=\"token punctuation\">:</span> name=value; expires=<span class=\"token punctuation\">[</span>Date<span class=\"token punctuation\">]</span>; domain=<span class=\"token punctuation\">[</span>Domain<span class=\"token punctuation\">]</span>; path=<span class=\"token punctuation\">[</span>Path<span class=\"token punctuation\">]</span>; <span class=\"token punctuation\">[</span>Secure<span class=\"token punctuation\">]</span>\n</code></pre></div>\n<ul>\n<li><code class=\"language-text\">expires</code> : 쿠키의 유효기간, 유효기간이 지나면 파일이 남더라도 브라우저에서 읽을 수 없다.</li>\n<li><code class=\"language-text\">domain</code> : 쿠키를 전송할 도메인, 하나의 도메인 당 20개의 값만 가질 수 있다.</li>\n<li><code class=\"language-text\">path</code> = 쿠키를 전송할 경로, 경로를 <code class=\"language-text\">/</code>로 설정하면 모든페이지에서, <code class=\"language-text\">/example</code>로 설정하면 그 페이지 이하의 페이지에서 읽을 수 있다.</li>\n<li><code class=\"language-text\">secure</code> : 쿠키를 전송할 보안 전송 방법, 그러나 쿠키는 위험하지 않은 데이터를 전달하기 때문에 잘 사용하지 않는다.</li>\n</ul>\n<br>\n<h3 id=\"그렇다면-쿠키는-언제-생성될까\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%A0%87%EB%8B%A4%EB%A9%B4-%EC%BF%A0%ED%82%A4%EB%8A%94-%EC%96%B8%EC%A0%9C-%EC%83%9D%EC%84%B1%EB%90%A0%EA%B9%8C\" aria-label=\"그렇다면 쿠키는 언제 생성될까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>그렇다면 쿠키는 언제 생성될까?</strong></h3>\n<p>답은 <u>클라이언트가 페이지에 접속할 때, 서버에서 HTTP 헤더에 쿠키를 포함시켜 응답한다.</u></p>\n<p>클라이언트 측에서는 만료기간까지 보관하고 있다가, 같은 요청이 발생하면 쿠키를 함께 서버에 보낸다. 만약, 변경이 필요하다면 쿠키를 업데이트하여 응답한다.</p>\n<br>\n<h3 id=\"쿠키의-예시\" style=\"position:relative;\"><a href=\"#%EC%BF%A0%ED%82%A4%EC%9D%98-%EC%98%88%EC%8B%9C\" aria-label=\"쿠키의 예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>쿠키의 예시</strong></h3>\n<br>\n<p><code class=\"language-text\">장바구니</code></p>\n<p><code class=\"language-text\">팝업 다시보지 않기</code></p>\n<p><code class=\"language-text\">ID/PW 기억하기</code></p>\n<br>\n<hr>\n<h2 id=\"세션session\" style=\"position:relative;\"><a href=\"#%EC%84%B8%EC%85%98session\" aria-label=\"세션session permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>세션(Session)</strong></h2>\n<p>왜 쿠키 다음에 세션을 소개할까?</p>\n<p>그 이유는 바로 세션이 <code class=\"language-text\">서버에 저장되는 쿠키</code>이기 때문이다.</p>\n<p>세션은 클라이언트가 <code class=\"language-text\">브라우저를 종료할 때까지 유지</code>된다.\n그렇기 때문에 클라이언트를 구별하기 위한 <code class=\"language-text\">고유 세션 ID를 부여</code>한다.\n또한, 클라이언트가 일정시간 응답이 없다면 유지되지 않도록 할 수 있다.</p>\n<p><code class=\"language-text\">서버에 직접 저장</code>되므로 보안성이 높다.\n하지만 서버의 메모리에 영향을 주기 때문에 <code class=\"language-text\">성능 저하의 요인</code>이 될 수 있다.</p>\n<br>\n<h3 id=\"그렇다면-세션은-언제-생성될까\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%A0%87%EB%8B%A4%EB%A9%B4-%EC%84%B8%EC%85%98%EC%9D%80-%EC%96%B8%EC%A0%9C-%EC%83%9D%EC%84%B1%EB%90%A0%EA%B9%8C\" aria-label=\"그렇다면 세션은 언제 생성될까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>그렇다면 세션은 언제 생성될까?</strong></h3>\n<p>세션은 클라이언트가 <u>서버에 접속할 때, 서버는 고유 세션 ID를 발급하고 저장</u>한다.</p>\n<p>클라이언트는 서버에 요청할 때, 이 세션 ID를 같이 전달한다.</p>\n<p>전달받은 세션은 별다른 작업을 요구하지 않지만, 클라이언트의 정보를 담고 있다.</p>\n<br>\n<h3 id=\"세션의-예시\" style=\"position:relative;\"><a href=\"#%EC%84%B8%EC%85%98%EC%9D%98-%EC%98%88%EC%8B%9C\" aria-label=\"세션의 예시 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>세션의 예시</strong></h3>\n<br>\n<p><code class=\"language-text\">로그아웃 전까지 로그인 유지</code></p>\n<br>\n<hr>\n<h2 id=\"캐시cache\" style=\"position:relative;\"><a href=\"#%EC%BA%90%EC%8B%9Ccache\" aria-label=\"캐시cache permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>캐시(Cache)</strong></h2>\n<p>캐시는 쿠키, 세션과는 역할이 조금 다르다.</p>\n<p>캐시는 이미지, 오디오, 소스코드, CSS 등 <code class=\"language-text\">접근 비용이 비싼 데이터를 저장</code>해두었다가, 동일한 요청이 있을 때 <code class=\"language-text\">재요청하지 않고 데이터를 제공</code>할 수 있게 하는 <code class=\"language-text\">임시 저장소</code>이다.</p>\n<p>로고나 버튼이미지, 검색창 같이 <code class=\"language-text\">다시 사용될 가능성이 높은 요소</code>를 캐시로 저장하면 서버의 부하(Load), 대역폭의 부담을 줄이고, 최종적으로 <code class=\"language-text\">사용자에게 전달하는 속도를 높일 수 있다.</code></p>\n<p>다시 사용될 가능성이 높은 요소를 선정했기 때문에 항상 캐시가 사용되지 않는다. 따라서 리소스 요청이 이전에 왔던 것과 같은 게 있다면, <code class=\"language-text\">캐시 적중(Cache Hit)</code>, 웹서버로 처음 요청된 리소스라면, <code class=\"language-text\">캐시 부적중(Cache Miss)</code>라고 한다.</p>\n<br>\n<p>한편, 한번 캐시에 저장되면 서버에서 변경해도, 사용자는 변경되지 않은 것처럼 보일 수 있다.\n로고나 이미지가 바뀐것을 어떻게 알 수 있을까?</p>\n<h3 id=\"그렇다면-캐시는-언제-생성될까\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%A0%87%EB%8B%A4%EB%A9%B4-%EC%BA%90%EC%8B%9C%EB%8A%94-%EC%96%B8%EC%A0%9C-%EC%83%9D%EC%84%B1%EB%90%A0%EA%B9%8C\" aria-label=\"그렇다면 캐시는 언제 생성될까 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>그렇다면 캐시는 언제 생성될까?</strong></h3>\n<p>캐시는 아래 7단계를 거쳐 생성된다.</p>\n<p><code class=\"language-text\">요청받기</code> > <code class=\"language-text\">파싱</code> > <code class=\"language-text\">검색</code> > <code class=\"language-text\">신선도검사</code> > <code class=\"language-text\">응답생성</code> > <code class=\"language-text\">전송</code> > <code class=\"language-text\">로깅</code></p>\n<br>\n<ol>\n<li>\n<p><code class=\"language-text\">요청받기</code> : 클라이언트에서 네트워크 연결이 시작되면 요청 데이터를 읽어들인다.</p>\n</li>\n<li>\n<p><code class=\"language-text\">파싱</code> : 요청 메시지를 캐싱 소프트웨어를 이용해 헤더 부분을 자료구조에 담는다(ex. dictionary)</p>\n</li>\n<li>\n<p><code class=\"language-text\">검색</code> : 요청 URL에 해당하는 로컬 사본을 검색한다. 사본의 위치는 메모리, 디스크, 로컬 컴퓨터 등 다양한 위치가 될 수 있다.</p>\n</li>\n<li>\n<p><code class=\"language-text\">신선도 검사</code> : 캐시가 적중(Hit)한 경우, <a href=\"https://feel5ny.github.io/2019/10/05/HTTP_007-2/#algorithm\">신선도 검사 알고리즘</a>을 통해 캐시가 유효한지 검사한다.</p>\n</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\">$충분히_신선한가 = $나이 &lt; $신선도_수명</code></pre></div>\n<ul>\n<li>\n<p>$나이 : 서버가 문서를 보낸 후(혹은 서버가 마지막으로 재검사한 후) 그 문서가 나이를 먹은 시간의 총합이다.</p>\n</li>\n<li>\n<p>$신선도_수명 : 서버와 클라이언트의 제약조건에 의존한다. 일반적으로 서버는 얼마나 자주 발행되었는지에 대한 정보를, 클라이언트는 최신 콘텐츠에 대한 요구를 제약조건으로 설정한다.</p>\n</li>\n</ul>\n<br>\n<ol start=\"5\">\n<li>\n<p><code class=\"language-text\">응답 생성</code> : 캐시가 신선하다면, 캐시의 오래된 헤더에 <code class=\"language-text\">신선도 정보(Cache-Control, Age, Expires 헤더)를 삽입</code>한다. Date 헤더는 최초 생성 정보이기 때문에 수정하면 안된다.</p>\n</li>\n<li>\n<p><code class=\"language-text\">전송</code> :</p>\n</li>\n<li>\n<p><code class=\"language-text\">로깅</code> : 캐시 전송 후 캐시 Hit, Miss에 대한 통계를 작성하고, 로그 파일에 요청 종류, URL, 작업 내용을 기록한다.</p>\n</li>\n</ol>\n<br>\n<hr>\n<h2 id=\"마무리\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\" aria-label=\"마무리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마무리</h2>\n<p>자, 이제 쿠키, 세션, 캐시에 대해 설명할 수 있는가?</p>\n<p>쿠키와 세션, 캐시 모두 적절히 사용하면 약이 되지만, 과하게 의존한다면 독이 될 수 있다.</p>\n<p>다음에는 인증과 인가, JWT에 대한 내용을 다뤄보겠다.</p>\n<p><br/><br/></p>\n<p><em>출처</em></p>\n<p><em><a href=\"https://interconnection.tistory.com/74\">RyanGomdoriPooh님 블로그</a></em></p>\n<p><em><a href=\"https://ychcom.tistory.com/entry/%EC%BF%A0%ED%82%A4Cookie%EB%9E%80\">ychcom님 블로그</a></em></p>\n<p><em><a href=\"https://feel5ny.github.io/2019/10/05/HTTP_007-2/#algorithm\">feel5ny님 블로그</a></em></p>\n<br/>\n<hr>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EC%BF%A0%ED%82%A4cookie\"><strong>쿠키(Cookie)</strong></a></p>\n<ul>\n<li><a href=\"#%EA%B7%B8%EB%A0%87%EB%8B%A4%EB%A9%B4-%EC%BF%A0%ED%82%A4%EB%8A%94-%EC%96%B8%EC%A0%9C-%EC%83%9D%EC%84%B1%EB%90%A0%EA%B9%8C\"><strong>그렇다면 쿠키는 언제 생성될까?</strong></a></li>\n<li><a href=\"#%EC%BF%A0%ED%82%A4%EC%9D%98-%EC%98%88%EC%8B%9C\"><strong>쿠키의 예시</strong></a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%84%B8%EC%85%98session\"><strong>세션(Session)</strong></a></p>\n<ul>\n<li><a href=\"#%EA%B7%B8%EB%A0%87%EB%8B%A4%EB%A9%B4-%EC%84%B8%EC%85%98%EC%9D%80-%EC%96%B8%EC%A0%9C-%EC%83%9D%EC%84%B1%EB%90%A0%EA%B9%8C\"><strong>그렇다면 세션은 언제 생성될까?</strong></a></li>\n<li><a href=\"#%EC%84%B8%EC%85%98%EC%9D%98-%EC%98%88%EC%8B%9C\"><strong>세션의 예시</strong></a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%BA%90%EC%8B%9Ccache\"><strong>캐시(Cache)</strong></a></p>\n<ul>\n<li><a href=\"#%EA%B7%B8%EB%A0%87%EB%8B%A4%EB%A9%B4-%EC%BA%90%EC%8B%9C%EB%8A%94-%EC%96%B8%EC%A0%9C-%EC%83%9D%EC%84%B1%EB%90%A0%EA%B9%8C\"><strong>그렇다면 캐시는 언제 생성될까?</strong></a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC\">마무리</a></p>\n</li>\n</ul>\n</div>","excerpt":"지적과 댓글은 언제나 환영합니다!  시작에 앞서 이야기를 하기 전, 탄생 배경에 대해 알고가면 더욱 좋다. HTTP 프로토콜은 , 을 가지기 때문에\n클라이언트가 누구인지 저장하지 않는다.\n때문에 매 요청마다 사용자, 권한 등을 확인해야 한다. 이러한 특성을 보완하기 위해서 쿠키, 캐시와 같은 개념이 등장헀다. 쿠키(Cookie) 쿠키는 되고, 되는 이다. 쿠키는 아래와 같이 과 으로 구성되어 있다.  : 쿠키의 유효기간, 유효기간이 지나면 파일이 남더라도 브라우저에서 읽을 수 없다.  : 쿠키를 전송할 도메인, 하나의 도메인 당 20개의 값만 가질 수 있다.  = 쿠키를 전송할 경로, 경로를 로 설정하면 모든페이지에서, 로 설정하면 그 페이지 이하의 페이지에서 읽을 수 있다.  : 쿠키를 전송할 보안 전송 방법, 그러나 쿠키는 위험하지 않은 데이터를 전달하기 때문에 잘 사용하지 않는다. 그렇다면 쿠키는 언제 생성될까? 답은 클라이언트가 페이지에 접속할 때, 서버에서 HTTP 헤더에…","frontmatter":{"date":"September 17, 2022","title":"쿠키(Cookie)와 캐시(Cache), 세션(Session)의 차이를 아시나요?","categories":"knowledge","author":"주녁","emoji":"🔮"},"fields":{"slug":"/about-Cookie-and-Cache/"}},"next":{"id":"2a76b680-7425-5cef-b749-df12d36de8b6","html":"<p>지적과 댓글은 언제나 환영합니다!</p>\n<h2 id=\"index\" style=\"position:relative;\"><a href=\"#index\" aria-label=\"index permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>INDEX</h2>\n<p><a href=\"#string\">1. 문자열 관련</a></p>\n<p><a href=\"#collection\">2. Collection 관련</a></p>\n<p><a href=\"#cast\">3. 형 변환 관련</a></p>\n<p><a href=\"#json\">5. JSON 관련</a></p>\n<p><a href=\"#useful\">4. 유용한 함수</a></p>\n<p><br/><br/></p>\n<hr>\n<h2 id=\"문자열-관련span-idstringspan\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%9E%90%EC%97%B4-%EA%B4%80%EB%A0%A8span-idstringspan\" aria-label=\"문자열 관련span idstringspan permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문자열 관련<span id=\"string\"></span></h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 분자열 분리</span>\n<span class=\"token class-name\">StringTokenizer</span> st<span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringTokenizer</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"문자열 입니다\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> st<span class=\"token punctuation\">.</span><span class=\"token function\">nextToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"문자열\"</span>\n<span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"문\", \"자\", \"열\"]</span></code></pre></div>\n<br>\n<hr>\n<h2 id=\"collection-관련span-idcollectionspan\" style=\"position:relative;\"><a href=\"#collection-%EA%B4%80%EB%A0%A8span-idcollectionspan\" aria-label=\"collection 관련span idcollectionspan permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Collection 관련<span id=\"collection\"></span></h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">/* Header Library */</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Collection</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">List</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ArrayList</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HashMap</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Set</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token operator\">*</span></span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 급할떄만 쓰자</span>\n\n<span class=\"token comment\">/* Array */</span>\n    <span class=\"token comment\">// 선언</span>\n    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> _arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 합계</span>\n    <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\n    <span class=\"token comment\">// 출력</span>\n    <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">deepToString</span><span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 복사</span>\n    <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyOfRange</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 중복제거</span>\n    <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">A</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">distinct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* List */</span>\n    <span class=\"token comment\">// 중복제거</span>\n    list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">distinct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 정렬        </span>\n    <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 오름차순        </span>\n    <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">reverseOrder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 내림차순    </span>\n    <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span>CASE_INSENSITIVE_ORDER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 오름차순 (대소문자 구분X)</span>\n\n    <span class=\"token comment\">// 최대, 최소</span>\n    <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* HashMap */</span>\n    <span class=\"token comment\">// 순회</span>\n    hashMap<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br>\n<hr>\n<h2 id=\"형-변환-관련span-idcastspan\" style=\"position:relative;\"><a href=\"#%ED%98%95-%EB%B3%80%ED%99%98-%EA%B4%80%EB%A0%A8span-idcastspan\" aria-label=\"형 변환 관련span idcastspan permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>형 변환 관련<span id=\"cast\"></span></h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">/* 기본형 변환 */</span>\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"10\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// String → int</span>\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token class-name\">Character</span><span class=\"token punctuation\">.</span><span class=\"token function\">getNumericValue</span><span class=\"token punctuation\">(</span><span class=\"token char\">'10'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// char → int</span>\n    <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> chars <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// String → char[]</span>\n\n<span class=\"token comment\">/* List&lt;String> → String[] */</span>\n    <span class=\"token class-name\">String</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n        <span class=\"token comment\">// new String[0] : 같은 크기, </span>\n        <span class=\"token comment\">// new String[list.size()+1] : null로 채워서 append</span>\n\n<span class=\"token comment\">/* String [] → List&lt;String> */</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 새로운 객체를 생성</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 스트림 사용</span>\n        <span class=\"token comment\">// Arrays.asList(arr) : 원본 배열을 참조하는 리스트 반환(같이 변경됨)</span>\n\n<span class=\"token comment\">/* int[] → List&lt;Integer> */</span>\n    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> intList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        \n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> item <span class=\"token operator\">:</span> arr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        intList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        \n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 스트림 사용</span>\n    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> intList <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span>\n                                <span class=\"token punctuation\">.</span><span class=\"token function\">boxed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>                        \n                                <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<br>\n<hr>\n<h2 id=\"json-span-idjsonspan\" style=\"position:relative;\"><a href=\"#json-span-idjsonspan\" aria-label=\"json span idjsonspan permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JSON <span id=\"json\"></span></h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fasterxml<span class=\"token punctuation\">.</span>jackson<span class=\"token punctuation\">.</span>core<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">JsonProcessingException</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>fasterxml<span class=\"token punctuation\">.</span>jackson<span class=\"token punctuation\">.</span>databind<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ObjectMapper</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">ObjectMapper</span> objectMapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// JSON을 Object로</span>\n<span class=\"token class-name\">Student</span> student <span class=\"token operator\">=</span> objectMapper<span class=\"token punctuation\">.</span><span class=\"token function\">readValue</span><span class=\"token punctuation\">(</span>jsonStr<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Student</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> studentArr <span class=\"token operator\">=</span> objectMapper<span class=\"token punctuation\">.</span><span class=\"token function\">readValue</span><span class=\"token punctuation\">(</span>jsonArrStr<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// JSON을 Map으로</span>\n<span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> jsonMap <span class=\"token operator\">=</span> objectMapper<span class=\"token punctuation\">.</span><span class=\"token function\">readValue</span><span class=\"token punctuation\">(</span>jsonStr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeReference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Object를 JSON으로</span>\n<span class=\"token class-name\">String</span> studentJson <span class=\"token operator\">=</span> objectMapper<span class=\"token punctuation\">.</span><span class=\"token function\">writeValueAsString</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">String</span> studentJson <span class=\"token operator\">=</span> objectMapper<span class=\"token punctuation\">.</span><span class=\"token function\">writeValueAsString</span><span class=\"token punctuation\">(</span>jsonMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<h2 id=\"유용한-함수span-idusefulspan\" style=\"position:relative;\"><a href=\"#%EC%9C%A0%EC%9A%A9%ED%95%9C-%ED%95%A8%EC%88%98span-idusefulspan\" aria-label=\"유용한 함수span idusefulspan permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>유용한 함수<span id=\"useful\"></span></h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">\n<span class=\"token comment\">/* Graph 생성 */</span>\n    <span class=\"token comment\">// 단 방향 [출발노드,도착노드] 가 주어졌을 때</span>\n    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> list<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 인접리스트 초기화</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        list<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 양방향 인접리스트</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> start<span class=\"token operator\">=</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> end<span class=\"token operator\">=</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        list<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n</code></pre></div>\n<br>\n<hr>\n<p><em>출처</em></p>\n<p><em><a href=\"https://gwang920.github.io/java/Java-condingGrammer/\">gwang920님 블로그</a></em></p>\n<p><em><a href=\"https://hianna.tistory.com/551\">hianna님 블로그</a></em></p>\n<p><em><a href=\"https://velog.io/@hygge/Java-%EC%BD%94%EB%94%A9%ED%85%8C%EC%8A%A4%ED%8A%B8-%EB%AC%B8%EB%B2%95-%EC%86%8D%EC%84%B1-%EC%A0%95%EB%A6%AC\">hygge님 블로그</a></em></p>\n<br/>\n<hr>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#index\">INDEX</a></li>\n<li><a href=\"#%EB%AC%B8%EC%9E%90%EC%97%B4-%EA%B4%80%EB%A0%A8span-idstringspan\">문자열 관련<span id=\"string\"></span></a></li>\n<li><a href=\"#collection-%EA%B4%80%EB%A0%A8span-idcollectionspan\">Collection 관련<span id=\"collection\"></span></a></li>\n<li><a href=\"#%ED%98%95-%EB%B3%80%ED%99%98-%EA%B4%80%EB%A0%A8span-idcastspan\">형 변환 관련<span id=\"cast\"></span></a></li>\n<li><a href=\"#json-span-idjsonspan\">JSON <span id=\"json\"></span></a></li>\n<li><a href=\"#%EC%9C%A0%EC%9A%A9%ED%95%9C-%ED%95%A8%EC%88%98span-idusefulspan\">유용한 함수<span id=\"useful\"></span></a></li>\n</ul>\n</div>","frontmatter":{"date":"September 16, 2022","title":"알고리즘에서 써먹는 자바(Java) 문법 정리","categories":"how-to","author":"주녁","emoji":"🔮"},"fields":{"slug":"/use-java/"}},"prev":{"id":"1c81be58-f49a-56e4-a602-4d141277e950","html":"<p>지적과 댓글은 언제나 환영합니다!</p>\n<p><br/><br/></p>\n<h1 id=\"들어가기에-앞서\" style=\"position:relative;\"><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0%EC%97%90-%EC%95%9E%EC%84%9C\" aria-label=\"들어가기에 앞서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>들어가기에 앞서</h1>\n<br>\n<p><code class=\"language-text\">프로세스(Process)</code>와 <code class=\"language-text\">쓰레드(Thread)</code>의 차이를 설명하기에 앞서</p>\n<p><code class=\"language-text\">프로그램(Program)</code>의 정의를 짚고 넘어가자.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">어떤 문제를 해결하기 위해 컴퓨터에게 주어지는 \n처리 방법과 순서를 기술한 일련의 명령문의 집합체.\n(국어표준대사전)</code></pre></div>\n<br>\n<p>그렇다. 프로그램은 <u>명령문의 집합체</u>이다.</p>\n<p>코드의 덩어리일뿐 아직 실행되지 않은 상태이다.</p>\n<p>이 상태를 <code class=\"language-text\">정적(static)인 상태</code>라고 한다.</p>\n<br>\n<p>반대로, <code class=\"language-text\">동적(Dynamic)인 상태</code>도 있다.</p>\n<p>실행시, 메모리에 <code class=\"language-text\">프로그램</code>이 적재되는 것을 동적인 상태라고 한다.</p>\n<p>그리고 이렇게 <u>동적인 상태에 있는 프로그램</u>을 <code class=\"language-text\">*프로세스</code>라고 한다.</p>\n<p>*<em>P.S 스케줄러 입장에서는 <code class=\"language-text\">작업(task)</code>라고 부르기도 한다.</em></p>\n<br/>\n<hr>\n<h2 id=\"운영체제와-프로세스\" style=\"position:relative;\"><a href=\"#%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C%EC%99%80-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4\" aria-label=\"운영체제와 프로세스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>운영체제와 프로세스</strong></h2>\n<br/>\n<p><code class=\"language-text\">프로세스</code>는 프로그램이 메모리에 올라가 있는 상태이다.</p>\n<br>\n프로그램이 메모리에 올라갈 때, \n<p>운영체제는 <code class=\"language-text\">PCB</code>(Process Control Block)라는</p>\n<p>자료구조를 통해 프로세스를 제어한다.</p>\n<br>\n<p>운영체제는 하나의 CPU로 여러 개의 프로세스를 구동하기 위해,</p>\n<p><u>일정한 CPU 시간 만큼 할당하여 여러 프로세스를 실행</u>하는</p>\n<p><code class=\"language-text\">시분할 방식</code>을 사용한다.</p>\n<br>\n<p>이 때 <u>프로세스를 전환하는 작업</u>을 <code class=\"language-text\">Context Switching</code>이라고 하고,</p>\n<p><code class=\"language-text\">PCB</code>를 통해 상태를 저장하고 불러온다.</p>\n<br>\n<hr>\n<h2 id=\"점점-더-커지는-프로그램의-크기\" style=\"position:relative;\"><a href=\"#%EC%A0%90%EC%A0%90-%EB%8D%94-%EC%BB%A4%EC%A7%80%EB%8A%94-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%9D%98-%ED%81%AC%EA%B8%B0\" aria-label=\"점점 더 커지는 프로그램의 크기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>점점 더 커지는 프로그램의 크기</h2>\n<br>\n<p>여기서 문제가 발생한다.</p>\n<p><u>100만번의 요청을 프로세스 혼자 감당할 수 있을까?</u></p>\n<br>\n<p>혹시, <u>프로세스를 여러개로 늘리면 되지 않을까?</u></p>\n<p>하는 생각을 했는가?</p>\n<br>\n<p>아쉽지만, 운영체제는 안정성을 위해서</p>\n<p><u>프로세스에게 할당된 메모리에만 접근</u> 하도록</p>\n<p><code class=\"language-text\">제약</code>을 두기 때문에 불가능한 일이다.</p>\n<br>\n<p>이러한 문제를 해결하기 위해 만들어진 개념이 있다.</p>\n<p><u>프로세스의 메모리를 공유하는 더 작은 실행 단위</u>, <code class=\"language-text\">쓰레드(Thread)</code>이다.</p>\n<br>\n<hr>\n<h2 id=\"쓰레드의-특징\" style=\"position:relative;\"><a href=\"#%EC%93%B0%EB%A0%88%EB%93%9C%EC%9D%98-%ED%8A%B9%EC%A7%95\" aria-label=\"쓰레드의 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>쓰레드의 특징</strong></h2>\n<br>\n<h3 id=\"응답성-향상\" style=\"position:relative;\"><a href=\"#%EC%9D%91%EB%8B%B5%EC%84%B1-%ED%96%A5%EC%83%81\" aria-label=\"응답성 향상 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>응답성 향상</strong></h3>\n<p>프로세스는 하나 이상의 쓰레드를 갖는다.</p>\n<p>따라서, 어느 한 쓰레드가 대기중이어도</p>\n<p>다른 쓰레드들은 작업을 계속 진행할 수 있다.</p>\n<br>\n<h3 id=\"자원-공유\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EC%9B%90-%EA%B3%B5%EC%9C%A0\" aria-label=\"자원 공유 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>자원 공유</strong></h3>\n<p>또한, 같은 프로세스 내의 쓰레드는 <u><code class=\"language-text\">Heap</code> 영역 내의 메모리를 공유</u>한다.</p>\n<p><em>*<code class=\"language-text\">Stack</code> 영역의 메모리는 각자 사용한다.</em></p>\n<p>때문에, <code class=\"language-text\">Context Switching</code> 비용이</p>\n<p>멀티 프로세스 환경보다 상대적으로 저렴하다.</p>\n<br>\n<p>쓰레드는 탁월한 기능을 가지고 있지만,</p>\n<p>그만큼 주의할 점도 있다.</p>\n<p>한 쓰레드가 문제가 생기면, 전체 프로세스에 영향을 준다.</p>\n<p>그리고 같은 데이터에 접근할 때 생기는 <code class=\"language-text\">*동시성 문제</code>이다.</p>\n<p><em>*이 문제는 다음 포스팅을 통해 확인하자.</em></p>\n<p><br/><br/></p>\n<h2 id=\"마무리하며\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC%ED%95%98%EB%A9%B0\" aria-label=\"마무리하며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>마무리하며..</strong></h2>\n<p>자, 이제 프로세스와 쓰레드의 차이를 설명할 수 있는가?</p>\n<p>조금 더 공부가 필요하다면,</p>\n<p>Interner Explorer와 Chrome의 동작방식에 대해 찾아보자.</p>\n<br>\n<p><em>출처</em></p>\n<p><em><a href=\"https://velog.io/@raejoonee/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%99%80-%EC%8A%A4%EB%A0%88%EB%93%9C%EC%9D%98-%EC%B0%A8%EC%9D%B4\">raejoonee님 블로그</a></em></p>\n<p><em><a href=\"https://brunch.co.kr/@kd4/3\">kd4님 블로그</a></em></p>\n<p><em><a href=\"https://preamtree.tistory.com/10\">preamtree님 블로그</a></em></p>\n<br/>\n<hr>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C%EC%99%80-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4\"><strong>운영체제와 프로세스</strong></a></p>\n</li>\n<li>\n<p><a href=\"#%EC%A0%90%EC%A0%90-%EB%8D%94-%EC%BB%A4%EC%A7%80%EB%8A%94-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8%EC%9D%98-%ED%81%AC%EA%B8%B0\">점점 더 커지는 프로그램의 크기</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%93%B0%EB%A0%88%EB%93%9C%EC%9D%98-%ED%8A%B9%EC%A7%95\"><strong>쓰레드의 특징</strong></a></p>\n<ul>\n<li><a href=\"#%EC%9D%91%EB%8B%B5%EC%84%B1-%ED%96%A5%EC%83%81\"><strong>응답성 향상</strong></a></li>\n<li><a href=\"#%EC%9E%90%EC%9B%90-%EA%B3%B5%EC%9C%A0\"><strong>자원 공유</strong></a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%A7%88%EB%AC%B4%EB%A6%AC%ED%95%98%EB%A9%B0\"><strong>마무리하며..</strong></a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"September 19, 2022","title":"프로세스(Process)와 쓰레드(Thread)의 차이를 아시나요?","categories":"knowledge","author":"주녁","emoji":"🔮"},"fields":{"slug":"/about-Process-and-Thread/"}},"site":{"siteMetadata":{"siteUrl":"https://www.junwork.net","comments":{"utterances":{"repo":"junwork123/blog-comments"}}}}},"pageContext":{"slug":"/about-Cookie-and-Cache/","nextSlug":"/use-java/","prevSlug":"/about-Process-and-Thread/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}