{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/Spring-Learn-MVC-version-diff/",
    "result": {"data":{"cur":{"id":"ade93107-ce98-51c8-ae57-5b7ee0f8756f","html":"<p>지적과 댓글은 언제나 환영합니다!</p>\n<p><br/><br/></p>\n<h1 id=\"-spring-mvc-객체와-버전별-차이\" style=\"position:relative;\"><a href=\"#-spring-mvc-%EA%B0%9D%EC%B2%B4%EC%99%80-%EB%B2%84%EC%A0%84%EB%B3%84-%EC%B0%A8%EC%9D%B4\" aria-label=\" spring mvc 객체와 버전별 차이 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a># Spring MVC 객체와 버전별 차이</h1>\n<p>이번 포스팅에서는</p>\n<p>Spring에서 사용하는 MVC 모델이 발전해온 과정을</p>\n<p>간략한 코드를 통해 살펴보도록 하겠다.</p>\n<p>(이 글은 인프런 김영한님 강의를 바탕으로 작성되었습니다.)</p>\n<hr>\n<br/>\n<h2 id=\"mvc-버전1\" style=\"position:relative;\"><a href=\"#mvc-%EB%B2%84%EC%A0%841\" aria-label=\"mvc 버전1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MVC 버전1</h2>\n<ul>\n<li>\n<p>매개변수 : request, response</p>\n</li>\n<li>\n<p>반환값 : void</p>\n</li>\n<li>\n<p>각 Controller가 View의 물리적인 주소를 직접 매핑하고 렌더링한다. (중복 발생)</p>\n</li>\n</ul>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// request에서 값을 가져온다.</span>\n        <span class=\"token class-name\">String</span> username <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> age <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">getParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 서비스 실행</span>\n        <span class=\"token class-name\">Member</span> member <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        memberRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// View에 전달할 값을 설정하고 View를 생성한다.</span>\n        request<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"member\"</span><span class=\"token punctuation\">,</span> member<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> viewPath <span class=\"token operator\">=</span> <span class=\"token string\">\"/WEB-INF/views/save-result.jsp\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">RequestDispatcher</span> dispatcher <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getRequestDispatcher</span><span class=\"token punctuation\">(</span>viewPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        dispatcher<span class=\"token punctuation\">.</span><span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<br/>\n<h2 id=\"mvc-버전2\" style=\"position:relative;\"><a href=\"#mvc-%EB%B2%84%EC%A0%842\" aria-label=\"mvc 버전2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MVC 버전2</h2>\n<ul>\n<li>\n<p>매개변수 : request, response</p>\n</li>\n<li>\n<p>반환값 : <u>View</u></p>\n</li>\n<li>\n<p>Controller가 Request에 값 객체를 넣고,</p>\n<p>물리적인 주소를 담은 View를 만들어서 전달한다.</p>\n</li>\n<li>\n<p><u>View 객체는 렌더링을 담당한다.</u></p>\n</li>\n</ul>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MyView</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// request에서 값을 가져온다.</span>\n        <span class=\"token class-name\">String</span> username <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> age <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">getParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 서비스 실행</span>\n        <span class=\"token class-name\">Member</span> member <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        memberRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// View에 전달할 값을 설정하고 View를 생성한다.</span>\n        request<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"member\"</span><span class=\"token punctuation\">,</span> member<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyView</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/WEB-INF/views/save-result.jsp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyView</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> viewPath<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// View의 주소를 생성자를 통해 설정한다.</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">MyView</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> viewPath<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>viewPath <span class=\"token operator\">=</span> viewPath<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// 매핑된 주소로 연결한다.</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">RequestDispatcher</span> dispatcher <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getRequestDispatcher</span><span class=\"token punctuation\">(</span>viewPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            dispatcher<span class=\"token punctuation\">.</span><span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<br/>\n<h2 id=\"mvc-버전3\" style=\"position:relative;\"><a href=\"#mvc-%EB%B2%84%EC%A0%843\" aria-label=\"mvc 버전3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MVC 버전3</h2>\n<ul>\n<li>\n<p>매개변수 : <u>Map&#x3C;String, String> paramMap </u></p>\n</li>\n<li>\n<p>반환값 : <u>ModelView</u></p>\n</li>\n<li>\n<p>request 대신 Model Map을 통하여 매개변수를 전달받는다</p>\n</li>\n<li>\n<p>Controller가 ModelView를 생성하여 논리적인 주소와 값 객체를 전달한다.</p>\n</li>\n<li>\n<p>ModelView는 <u>논리적인 주소와 Model Map(값 객체 맵)</u>를 담고 있다.</p>\n<p>→ request, response는 크기에 비해 일부만 사용하기 때문</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ModelView</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> paramMap<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// paramMap에서 값을 가져온다.</span>\n        <span class=\"token class-name\">String</span> username <span class=\"token operator\">=</span> paramMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> age <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>paramMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 서비스 실행</span>\n        <span class=\"token class-name\">Member</span> member <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        memberRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// ModelView에 전달할 값을 설정하고 ModelView를 생성한다.</span>\n        <span class=\"token class-name\">ModelView</span> mv <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ModelView</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"save-result\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        mv<span class=\"token punctuation\">.</span><span class=\"token function\">getModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"member\"</span><span class=\"token punctuation\">,</span> member<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span>\n        <span class=\"token keyword\">return</span> mv<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Getter</span> <span class=\"token annotation punctuation\">@Setter</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ModelView</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> viewName<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> model <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ModelView</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> viewName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>viewName <span class=\"token operator\">=</span> viewName<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<br/>\n<h2 id=\"mvc-버전4\" style=\"position:relative;\"><a href=\"#mvc-%EB%B2%84%EC%A0%844\" aria-label=\"mvc 버전4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MVC 버전4</h2>\n<ul>\n<li>\n<p>매개변수 : <u>paramMap</u> / <u>model</u></p>\n</li>\n<li>\n<p>반환값 : <u>논리적인 주소(String)</u></p>\n</li>\n<li>\n<p>V3에서 ModelView를 각각 컨트롤러가 생성하는 코드가 중복되어 제거한다.</p>\n</li>\n<li>\n<p><u>Front Cotroller에서 값이 담긴 모델 맵을 각 컨트롤러에 전달</u>한다.</p>\n</li>\n<li>\n<p>컨트롤러는 <u>값 객체에 값을 넣고, 논리적인 주소만을 전달</u>한다.</p>\n</li>\n</ul>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> paramMap<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> model<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// paramMap에서 값을 가져온다.</span>\n        <span class=\"token class-name\">String</span> username <span class=\"token operator\">=</span> paramMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> age <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>paramMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 서비스 실행</span>\n        <span class=\"token class-name\">Member</span> member <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        memberRepository<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>member<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Model에 값을 넣고 논리적인 주소만 전달한다.</span>\n        model<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"member\"</span><span class=\"token punctuation\">,</span> member<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"save-result\"</span><span class=\"token punctuation\">;</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<br/>\n<h2 id=\"mvc-버전5\" style=\"position:relative;\"><a href=\"#mvc-%EB%B2%84%EC%A0%845\" aria-label=\"mvc 버전5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MVC 버전5</h2>\n<ul>\n<li>\n<p>다양한 형태의 컨트롤러를 지원하기 위해 Adapter를 사용한다.</p>\n</li>\n<li>\n<p><u>FrontController에서 컨트롤러마다 Adapter를 지정한다.</u></p>\n<p>→ 큰 코드변경 없이 다양한 컨트롤러를 매핑할 수 있다. (컨트롤러가 아니여도 된다)</p>\n</li>\n</ul>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@WebServlet</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"frontControllerServletV5\"</span><span class=\"token punctuation\">,</span> urlPatterns <span class=\"token operator\">=</span> <span class=\"token string\">\"/front-controller/v5/*\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FrontControllerServletV5</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HttpServlet</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//private Map&lt;String, **ControllerV4**> controllerMap = new HashMap&lt;>();</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Map</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token class-name\">Object</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">></span> handlerMappingMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MyHandlerAdapter</span><span class=\"token punctuation\">></span></span> handlerAdapters <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">FrontControllerServletV5</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">initHandlerMappingMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">initHandlerAdapters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// V3, V4를 적용할 수 있는 어댑터를 핸들러와 매핑한다.</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">initHandlerMappingMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        handlerMappingMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/front-controller/v5/v3/members/new-form\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MemberFormControllerV3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        handlerMappingMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/front-controller/v5/v3/members/save\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MemberSaveControllerV3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        handlerMappingMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/front-controller/v5/v3/members\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MemberListControllerV3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// V4 추가</span>\n        handlerMappingMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/front-controller/v5/v4/members/new-form\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MemberFormControllerV4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        handlerMappingMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/front-controller/v5/v4/members/save\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MemberSaveControllerV4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        handlerMappingMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/front-controller/v5/v4/members\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MemberListControllerV4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">initHandlerAdapters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        handlerAdapters<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ControllerV3HandlerAdapter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        handlerAdapters<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ControllerV4HandlerAdapter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">service</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 1. 핸들러 조회</span>\n        <span class=\"token class-name\">Object</span> handler <span class=\"token operator\">=</span> <span class=\"token function\">getHandler</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>handler <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            response<span class=\"token punctuation\">.</span><span class=\"token function\">setStatus</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletResponse</span><span class=\"token punctuation\">.</span>SC_NOT_FOUND<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// 2. 핸들러를 처리 가능한 어댑터 조회</span>\n        <span class=\"token class-name\">MyHandlerAdapter</span> adapter <span class=\"token operator\">=</span> <span class=\"token function\">getHandlerAdapter</span><span class=\"token punctuation\">(</span>handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 3. 어댑터가 가진 핸들러 동작 = ModelView 반환</span>\n        <span class=\"token class-name\">ModelView</span> mv <span class=\"token operator\">=</span> adapter<span class=\"token punctuation\">.</span><span class=\"token function\">handle</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 4. ViewResolver 호출</span>\n        <span class=\"token class-name\">String</span> viewName <span class=\"token operator\">=</span> mv<span class=\"token punctuation\">.</span><span class=\"token function\">getViewName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">MyView</span> view <span class=\"token operator\">=</span> <span class=\"token function\">viewResolver</span><span class=\"token punctuation\">(</span>viewName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// 5. View Render()</span>\n        view<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>mv<span class=\"token punctuation\">.</span><span class=\"token function\">getModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">MyHandlerAdapter</span> <span class=\"token function\">getHandlerAdapter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> handler<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">MyHandlerAdapter</span> adapter <span class=\"token operator\">:</span> handlerAdapters<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>adapter<span class=\"token punctuation\">.</span><span class=\"token function\">supports</span><span class=\"token punctuation\">(</span>handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> adapter<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IllegalArgumentException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"handler adapter를 찾을 수 없습니다. handler = \"</span> <span class=\"token operator\">+</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">MyView</span> <span class=\"token function\">viewResolver</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> viewName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">MyView</span> view <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyView</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/WEB-INF/views/\"</span> <span class=\"token operator\">+</span> viewName <span class=\"token operator\">+</span> <span class=\"token string\">\".jsp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> view<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Object</span> <span class=\"token function\">getHandler</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span> requestURI <span class=\"token operator\">=</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getRequestURI</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Object</span> handler <span class=\"token operator\">=</span> handlerMappingMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>requestURI<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> handler<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 어댑터 인터페이스</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token class-name\">MyHandlerAdapter</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span> <span class=\"token punctuation\">{</span>\n <span class=\"token keyword\">boolean</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>supports<span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n <span class=\"token class-name\">ModelView</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>handle<span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> handler<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ControllerV3HandlerAdapter</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">MyHandlerAdapter</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">supports</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> handler<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>handler <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">ControllerV3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ModelView</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> handler<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">ControllerV3</span> controller <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ControllerV3</span><span class=\"token punctuation\">)</span> handler<span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> paramMap <span class=\"token operator\">=</span> <span class=\"token function\">createParamMap</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">ModelView</span> modelView <span class=\"token operator\">=</span> controller<span class=\"token punctuation\">.</span><span class=\"token function\">process</span><span class=\"token punctuation\">(</span>paramMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> modelView<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// request로 들어온 파라미터들을 쭉 저장해주는 paramMap 생성</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">createParamMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> paramMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        request<span class=\"token punctuation\">.</span><span class=\"token function\">getParameterNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">asIterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">forEachRemaining</span><span class=\"token punctuation\">(</span>paramName <span class=\"token operator\">-></span> paramMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>paramName<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getParameter</span><span class=\"token punctuation\">(</span>paramName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> paramMap<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br/>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ControllerV4HandlerAdapter</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">MyHandlerAdapter</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">supports</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> handler<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>handler <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">ControllerV4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ModelView</span> <span class=\"token function\">handle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> handler<span class=\"token punctuation\">)</span><span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">ControllerV4</span> controllerV4 <span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ControllerV4</span><span class=\"token punctuation\">)</span>handler<span class=\"token punctuation\">;</span>\n\n\t        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span>paramMap <span class=\"token operator\">=</span> <span class=\"token function\">createParamMap</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t        <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span>model <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t        <span class=\"token class-name\">String</span> viewName <span class=\"token operator\">=</span> controllerV4<span class=\"token punctuation\">.</span><span class=\"token function\">process</span><span class=\"token punctuation\">(</span>paramMap<span class=\"token punctuation\">,</span> model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t        <span class=\"token class-name\">ModelView</span> modelView <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ModelView</span><span class=\"token punctuation\">(</span>viewName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t        modelView<span class=\"token punctuation\">.</span><span class=\"token function\">setModel</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t        <span class=\"token keyword\">return</span> modelView<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">// request로 들어온 파라미터들을 쭉 저장해주는 paramMap 생성</span>\n\t    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token function\">createParamMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span>paramMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t        request<span class=\"token punctuation\">.</span><span class=\"token function\">getParameterNames</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">asIterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token function\">forEachRemaining</span><span class=\"token punctuation\">(</span>paramName <span class=\"token operator\">-></span> paramMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>paramName<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">.</span><span class=\"token function\">getParameter</span><span class=\"token punctuation\">(</span>paramName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t        <span class=\"token keyword\">return</span> paramMap<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><br/><br/></p>\n<p><em>출처</em></p>\n<p><em><a href=\"https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81-mvc-1#\">인프런 스프링 MVC 강의 1편</a></em></p>\n<p><em><a href=\"https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81-%ED%95%B5%EC%8B%AC-%EC%9B%90%EB%A6%AC-%EA%B8%B0%EB%B3%B8%ED%8E%B8/\">인프런 스프링 핵심 원리 기본편</a></em></p>\n<br/>\n<hr>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#mvc-%EB%B2%84%EC%A0%841\">MVC 버전1</a></li>\n<li><a href=\"#mvc-%EB%B2%84%EC%A0%842\">MVC 버전2</a></li>\n<li><a href=\"#mvc-%EB%B2%84%EC%A0%843\">MVC 버전3</a></li>\n<li><a href=\"#mvc-%EB%B2%84%EC%A0%844\">MVC 버전4</a></li>\n<li><a href=\"#mvc-%EB%B2%84%EC%A0%845\">MVC 버전5</a></li>\n</ul>\n</div>","excerpt":"지적과 댓글은 언제나 환영합니다!  # Spring MVC 객체와 버전별 차이 이번 포스팅에서는 Spring에서 사용하는 MVC 모델이 발전해온 과정을 간략한 코드를 통해 살펴보도록 하겠다. (이 글은 인프런 김영한님 강의를 바탕으로 작성되었습니다.) MVC 버전1 매개변수 : request, response 반환값 : void 각 Controller가 View의 물리적인 주소를 직접 매핑하고 렌더링한다. (중복 발생) MVC 버전2 매개변수 : request, response 반환값 : View Controller가 Request에 값 객체를 넣고, 물리적인 주소를 담은 View를 만들어서 전달한다. View 객체는 렌더링을 담당한다. MVC 버전3 매개변수 : Map<String, String> paramMap  반환값 : ModelView request 대신 Model Map을 통하여 매개변수를 전달받는다 Controller가 ModelView를 생성하여 논리적인 주소와 값 …","frontmatter":{"date":"August 09, 2022","title":"스프링 MVC 객체와 버전별 차이","categories":"Spring","author":"주녁","emoji":"🔮"},"fields":{"slug":"/Spring-Learn-MVC-version-diff/"}},"next":{"id":"658d2d6f-755a-597e-8bb8-de83ccb4e5a8","html":"<p>지적과 댓글은 언제나 환영합니다!</p>\n<p><br/><br/></p>\n<h1 id=\"의존성-주입이란\" style=\"position:relative;\"><a href=\"#%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%A3%BC%EC%9E%85%EC%9D%B4%EB%9E%80\" aria-label=\"의존성 주입이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>의존성 주입이란?</h1>\n<br/>\n<p>스프링에서 지원하는 핵심 프로그래밍 모델 중 하나로</p>\n<p>말 그대로 <strong>의존관계를 외부에서 결정</strong>해주는 디자인 패턴이다.</p>\n<p><br/><br/></p>\n<h2 id=\"의존관계\" style=\"position:relative;\"><a href=\"#%EC%9D%98%EC%A1%B4%EA%B4%80%EA%B3%84\" aria-label=\"의존관계 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>의존관계?</h2>\n<br/>\n<p>의존관계는 쉽게 이야기하자면</p>\n<p><code class=\"language-text\">한 쪽이 변경되면 다른 한쪽도 변경되는 관계</code>로 말할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Customer</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">// 초기모델</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 고유 ID</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> grade<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 회원 등급</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">DiscountPolicy</span> discountPolicy<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 할인정책</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Customer</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">// 변경 후 모델</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> grade<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">VipDiscountPolicy</span> vipPolicy<span class=\"token punctuation\">;</span> <span class=\"token comment\">// VIP 할인정책으로 변경</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>고객마다 할인정책을 정의해준 초기 모델에서</p>\n<p>VIP 고객전용으로 <code class=\"language-text\">할인정책을 변경하고 싶다면</code></p>\n<p><code class=\"language-text\">생성자, Getter, Setter 등을 모두 수정해야 한다.</code></p>\n<p>(이미 다른 서비스에서도 할인율을 사용하고 있다면 더 많은 수정이 필요하다)</p>\n<br/>\n<p>이러한 관계를 Customer와 DiscountPolicy는 <u>의존관계에 있다</u>고 할 수 있다.</p>\n<br/>\n<p>하지만, <code class=\"language-text\">회원 등급은 처음부터 VIP가 아닐텐데, 나중에 결정할 수는 없는걸까?</code></p>\n<p>= 의존성을 최대한 나중에 결정할 순 없을까?</p>\n<p><br/><br/></p>\n<h2 id=\"외부에서-결정하는-의존성\" style=\"position:relative;\"><a href=\"#%EC%99%B8%EB%B6%80%EC%97%90%EC%84%9C-%EA%B2%B0%EC%A0%95%ED%95%98%EB%8A%94-%EC%9D%98%EC%A1%B4%EC%84%B1\" aria-label=\"외부에서 결정하는 의존성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>외부에서 결정하는 의존성</h2>\n<br/>\n<p>할인 정책의 행동은 이미 알고있다. 할인해주는 행동이다.</p>\n<p>VIP 할인 정책의 행동은 무엇일까? 역시 할인이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">    discountPolicy<span class=\"token punctuation\">.</span><span class=\"token function\">discount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    vipPolicy<span class=\"token punctuation\">.</span><span class=\"token function\">discount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><br/><br/></p>\n<p>각 할인 정책은 <code class=\"language-text\">같은 행동을 하기 때문에 interface로 묶을 수 있다.</code></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">    <span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> discountPolicy<span class=\"token punctuation\">{</span> <span class=\"token comment\">// 할인 정책 인터페이스는</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">discount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 할인을 한다.</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> normalPolicy implementation discountPolicy<span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">discount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0.15</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// 할인율 15</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> vipPolicy implementation discountPolicy<span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">discount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0.30</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// 할인율 30</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p><br/><br/></p>\n<p>이런 식으로 interface를 통해 정의하게 되면</p>\n<p>아래와 같이 의존관계를 설정할 수 있다.</p>\n<p>이를 <code class=\"language-text\">생성자 주입 방식</code>이라고 하며, <code class=\"language-text\">Spring에서 권장하는 방법</code>이다.</p>\n<p>다른 방법들도 있지만 공식적으로 권장하지 않는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Customer</span><span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> discountPolicy discountPolicy<span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">Customer</span><span class=\"token punctuation\">(</span>discountPolicy policy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>discountPolicy <span class=\"token operator\">=</span> policy<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n        <span class=\"token class-name\">Customer</span> normal <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Customer</span><span class=\"token punctuation\">(</span>normalDiscountPolicy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Customer</span> vip <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Customer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">VipDiscountPolicy</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p><br/><br/></p>\n<p><code class=\"language-text\">생성자를 호출할 때 할인 정책</code>을 설정할 수 있게 되므로</p>\n<p>Customer가 생성될 때(로그인 시, 비로그인 주문 시 등등)</p>\n<p>할인 정책을 <code class=\"language-text\">결정</code>할 수 있게 된다.</p>\n<p>이게 바로 <code class=\"language-text\">의존성을 외부에서 주입한다</code>는 의미이다.</p>\n<br/>\n<h2 id=\"스프링과-di\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81%EA%B3%BC-di\" aria-label=\"스프링과 di permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스프링과 DI</h2>\n<p>실제로 스프링에서는 아래와 같이</p>\n<p>@Autowired 태그를 통해서</p>\n<p>DB 작업을 위한 repository 설정이나, Service 설정 등</p>\n<p><code class=\"language-text\">Bean 객체들을 의존성을 주입으로 사용하도록 권장</code>하고 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserService</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserRepository</span> userRepository<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">MemberService</span> memberService<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Autowired</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">UserService</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserRepository</span> userRepository<span class=\"token punctuation\">,</span> <span class=\"token class-name\">MemberService</span> memberService<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>userRepository <span class=\"token operator\">=</span> userRepository<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>memberService <span class=\"token operator\">=</span> memberService<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br/>\n<p>때문에 <code class=\"language-text\">변경이 필요한 부분은</code> 적절하게 의존성 주입이 가능하도록</p>\n<p><code class=\"language-text\">interface를 활용하여 설계하여야 한다.</code></p>\n<br/>\n<p><em>출처</em></p>\n<p><em><a href=\"https://mangkyu.tistory.com/125\">mangkyu님 블로그</a></em></p>\n<p><em><a href=\"https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81-mvc-1#\">인프런 스프링 MVC 강의 1편</a></em></p>\n<p><em><a href=\"https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81-%ED%95%B5%EC%8B%AC-%EC%9B%90%EB%A6%AC-%EA%B8%B0%EB%B3%B8%ED%8E%B8/\">인프런 스프링 핵심 원리 기본편</a></em></p>\n<br/>\n<hr>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EC%9D%98%EC%A1%B4%EA%B4%80%EA%B3%84\">의존관계?</a></li>\n<li><a href=\"#%EC%99%B8%EB%B6%80%EC%97%90%EC%84%9C-%EA%B2%B0%EC%A0%95%ED%95%98%EB%8A%94-%EC%9D%98%EC%A1%B4%EC%84%B1\">외부에서 결정하는 의존성</a></li>\n<li><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81%EA%B3%BC-di\">스프링과 DI</a></li>\n</ul>\n</div>","frontmatter":{"date":"July 31, 2022","title":"스프링 의존성 주입(Dependency Injection)이란?","categories":"Spring","author":"주녁","emoji":"🔮"},"fields":{"slug":"/Spring-Learn-What-is-DI/"}},"prev":{"id":"f55fd0fb-ad38-5618-b49c-866183c16503","html":"<p>파이썬 문법 및 유용한 코드를 모아놓은 곳입니다.</p>\n<h2 id=\"index\" style=\"position:relative;\"><a href=\"#index\" aria-label=\"index permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>INDEX</h2>\n<p><a href=\"#string\">1. 문자열 관련 메소드</a></p>\n<p><a href=\"#list\">2. 리스트 관련 메소드</a></p>\n<p><a href=\"#re\">3. 정규표현식(re모듈)</a></p>\n<p><a href=\"#compre\">4. List Comprehention</a></p>\n<p><a href=\"#useful\">5. 유용한 함수</a></p>\n<p><br/><br/></p>\n<hr>\n<h3 id=\"문자열-관련-메소드span-idstringspan\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EC%9E%90%EC%97%B4-%EA%B4%80%EB%A0%A8-%EB%A9%94%EC%86%8C%EB%93%9Cspan-idstringspan\" aria-label=\"문자열 관련 메소드span idstringspan permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문자열 관련 메소드<span id=\"string\"></span></h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># 문자열 뒤집기</span>\ns <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># 문자열 교체(공백 or 특정문자제거)</span>\ns <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">import</span> re\ns <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">(</span><span class=\"token string\">r'[^a-zA-Z0-9]'</span><span class=\"token punctuation\">,</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 문자열 나눔</span>\ns <span class=\"token operator\">=</span> <span class=\"token string\">'h e l l o'</span>\ns<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'h'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'e'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'l'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'l'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'o'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span>char <span class=\"token keyword\">for</span> char <span class=\"token keyword\">in</span> s<span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># 문자열 연결</span>\n<span class=\"token builtin\">list</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'h'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'e'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'l'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'l'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'o'</span><span class=\"token punctuation\">]</span>\n<span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">=</span> hello\n\n<span class=\"token comment\"># 문자열 판단</span>\n<span class=\"token string\">'year2017'</span><span class=\"token punctuation\">.</span>isalnum<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n\n<span class=\"token string\">'year2017!!!'</span><span class=\"token punctuation\">.</span>isalnum<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n\n<span class=\"token comment\"># 문자열 길이</span>\n<span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n\n<span class=\"token comment\"># 문자열 검색</span>\n<span class=\"token string\">'hello'</span><span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token string\">'l'</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n\n<span class=\"token comment\"># find와 동일, 없을 때 예외를 발생</span>\n<span class=\"token string\">'hello'</span><span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span><span class=\"token string\">'l'</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n\n<span class=\"token string\">'l'</span> <span class=\"token keyword\">in</span> <span class=\"token string\">'hello'</span>\n<span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n\n<span class=\"token string\">'l'</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> <span class=\"token string\">'hello'</span>\n<span class=\"token operator\">=</span> <span class=\"token boolean\">False</span></code></pre></div>\n<p><br/><br/></p>\n<hr>\n<h3 id=\"리스트-관련-함수span-idlistspan\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%EC%8A%A4%ED%8A%B8-%EA%B4%80%EB%A0%A8-%ED%95%A8%EC%88%98span-idlistspan\" aria-label=\"리스트 관련 함수span idlistspan permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리스트 관련 함수<span id=\"list\"></span></h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># 알파벳 생성하기</span>\n<span class=\"token keyword\">from</span> string <span class=\"token keyword\">import</span> ascii_lowercase\n<span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">.</span>ascii_lowercase<span class=\"token punctuation\">)</span>\n\n<span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">chr</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">97</span><span class=\"token punctuation\">,</span> <span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span><span class=\"token builtin\">chr</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">ord</span><span class=\"token punctuation\">(</span><span class=\"token string\">'z'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\n\n<span class=\"token comment\"># 리스트 뒤집기</span>\nl<span class=\"token punctuation\">.</span>reverse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># List Comprehensions 방식으로 생성하기</span>\nl <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>i <span class=\"token operator\">*</span> i <span class=\"token keyword\">for</span> <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span>\nl <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>i <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> L <span class=\"token keyword\">if</span> i <span class=\"token operator\">%</span> <span class=\"token number\">3</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># 2차원 배열 동적 생성(다익스트라)</span>\ngraph <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> y <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> items <span class=\"token keyword\">in</span> lists<span class=\"token punctuation\">:</span>\n    graph<span class=\"token punctuation\">[</span>items<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>items<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> items<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># 리스트 안에 값 확인</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token keyword\">in</span> l<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> l<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 리스트 값 추가</span>\nl<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 값 추가</span>\n\nl<span class=\"token punctuation\">.</span>insert<span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 값 추가</span>\n\nl<span class=\"token punctuation\">.</span>extend<span class=\"token punctuation\">(</span>iterable<span class=\"token punctuation\">)</span> <span class=\"token comment\"># iterable 인자를 넘겨 리스트에 추가</span>\nl<span class=\"token punctuation\">.</span>extend<span class=\"token punctuation\">(</span><span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">13</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 10~12까지</span>\n\n<span class=\"token comment\"># 리스트 값 삭제</span>\n<span class=\"token keyword\">del</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 특정 인덱스 삭제</span>\n\n<span class=\"token keyword\">del</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 리스트 자체 삭제</span>\n\nl<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 특정 인덱스 위치의 값을 리턴하면서 삭제</span>\n\nl<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 전달한 값을 삭제</span>\n\nl<span class=\"token punctuation\">.</span>clear<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 리스트 값 모두 삭제(빈 리스트 생성)</span>\n\n<span class=\"token comment\"># 리스트 정렬</span>\nl<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 오름차순 정렬</span>\nl<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span>reverse<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 내림차순 정렬</span>\n\n<span class=\"token comment\"># 리스트 길이</span>\n<span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 리스트 슬라이싱</span>\nl<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token comment\"># 리스트에서 짝수번째만 가져옴</span>\n<span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">sorted</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 리스트 정렬 후 짝수번째만 합치기</span>\n\n<span class=\"token comment\"># 리스트 문자열 합치기</span>\nA <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">]</span>\nl <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 리스트 내부 정렬</span>\n<span class=\"token comment\"># 띄어쓰기 기준으로 나눈 뒤 사전식 정렬, 같을 경우 맨 앞 기준 정렬</span>\nl<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span>key<span class=\"token operator\">=</span><span class=\"token keyword\">lambda</span> x <span class=\"token punctuation\">:</span> l<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># defaultDict를 탐색할 때</span>\n<span class=\"token comment\"># list()로 감싸줘야 key size changed 에러 발생 방지</span>\n<span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>newDict<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\">#----</span></code></pre></div>\n<p><br/><br/></p>\n<hr>\n<h3 id=\"정규표현식re모듈span-idrespan\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EA%B7%9C%ED%91%9C%ED%98%84%EC%8B%9Dre%EB%AA%A8%EB%93%88span-idrespan\" aria-label=\"정규표현식re모듈span idrespan permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정규표현식(re모듈)<span id=\"re\"></span></h3>\n<ul>\n<li>주요 메소드</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> re\n\n<span class=\"token comment\"># 특수문자 제거</span>\ns <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">(</span><span class=\"token string\">r\"[^a-zA-Z0-9]\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 동일한 구문을 많이 써야하는 경우 정규식 객체를 반환</span>\nc <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'[0-9]'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 문자열 전체에서 검색</span>\nre<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span><span class=\"token string\">'[a-z]'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'123abc45'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">=</span> <span class=\"token number\">3</span>\nre<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span><span class=\"token string\">'[a-z]'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'123abc45'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>end<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">=</span> <span class=\"token number\">4</span>\n\nre<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span><span class=\"token string\">'[a-z]+'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'123abc45'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">=</span> <span class=\"token number\">3</span>\nre<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span><span class=\"token string\">'[a-z]+'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'123abc45'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>end<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">=</span> <span class=\"token number\">6</span>\n\n<span class=\"token comment\"># 문자열 전체에서 일치하는 모든 부분을 검색</span>\nre<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span><span class=\"token string\">'[a-z]'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'123abc45'</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span>\nre<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span><span class=\"token string\">'[a-z]+'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'123abc45'</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">]</span></code></pre></div>\n<br/>\n<ul>\n<li>자주 쓰이는 예시</li>\n</ul>\n<p>[Pp]ython : Python 혹은 python</p>\n<p>[^aeiou] : 소문자 모음 제외</p>\n<p>^abc : abc로 시작해야함</p>\n<p>xyz$ : xyz로 종료되어야함</p>\n<p>\\d{3} : 숫자가 3개 있어야 함</p>\n<p>\\d+ : 숫자가 1개 이상</p>\n<p>\\d? : 숫자가 1개던지 없던지</p>\n<ul>\n<li>반복횟수</li>\n</ul>\n<p>* : 0회 이상 반복</p>\n<p>+ : 1회 이상 반복</p>\n<p>? : 0회 or 1회</p>\n<p>{m} : m회 반복</p>\n<p>{m,n} : m회에서 n회까지 반복</p>\n<ul>\n<li>매칭조건\n. : 줄바꿈 문자를 제외한 모든 문자와 매치됨</li>\n</ul>\n<p>^ : 문자열의 시작과 매치</p>\n<p>$ : 문자열의 마지막과 매치</p>\n<p>[] : 문자 집합 중 하나 <em>ex : [0-9]</em></p>\n<p>| : 또는(or)을 의미</p>\n<p>{} : 정규식을 그룹으로 묶음</p>\n<ul>\n<li>이스케이프 기호\n\\ : 역슬래쉬 문자 자체</li>\n</ul>\n<p>\\d : 모든 숫자 [0-9]</p>\n<p>\\D : 숫자가 아닌 문자 [^0-9]</p>\n<p>\\w : 숫자 또는 문자와 매치됨</p>\n<p>\\W : 숫자 또는 문자가 아닌 것과 매치됨</p>\n<p>\\b : 단어(숫자, 영문자의 연속)의 경계</p>\n<p>\\B : 단어(숫자, 영문자의 연속)의 경계가 아닌 것</p>\n<blockquote>\n<p><em>ex : Raindrops on roses, and whiskers on kittens.</em></p>\n<p>위 문장에서 단어의 경계, 즉 메타 문자 \\b 는 아래와 같이 | 를 표시한 위치를 가리킨다.</p>\n<p>|Raindrops| |on| |roses|, |and| |whiskers| |on| |kittens|.</p>\n<p>이 문장에서 /\\bo.\\b/ 를 매치시킨 결과는 다음과 같다.</p>\n<p>|Raindrops| <em><strong>|on|</strong></em> |roses|, |and| |whiskers| <em><strong>|on|</strong></em> |kittens|.</p>\n<p>패턴이 단어의 경계 사이에 있는 o와 나머지 한 문자를 나타내기 때문이다.</p>\n<p>\\B 는 \\b와 반대로 동작하는데, 이것도 각 위치를 표시해보면 이해하기 쉽다.</p>\n<p>R|a|i|n|d|r <em><strong>|o|p|</strong></em> s o|n r| <em><strong>o|s|</strong></em> e|s, a|n|d w|h|i|s|k|e|r|s o|n k|i|t|t|e|n|s.</p>\n</blockquote>\n<p>\\A : 문자열의 처음에만 일치</p>\n<p>\\Z : 문자열의 끝에만 일치</p>\n<p>\\s : 공백문자 [\\t\\n\\r\\f\\v]</p>\n<p>\\S : 공백문자가 아닌 것 [^\\t\\n\\r\\f\\v]</p>\n<ul>\n<li>플래그\nX, VERBOSE : 정규식 안의 공백을 무시</li>\n</ul>\n<p>I, IGNORECATE : 대소문자를 구별하지 않는다.</p>\n<h3 id=\"list-comprehentionspan-idcomprespan\" style=\"position:relative;\"><a href=\"#list-comprehentionspan-idcomprespan\" aria-label=\"list comprehentionspan idcomprespan permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>List Comprehention<span id=\"compre\"></span></h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">\nstring1 <span class=\"token operator\">=</span> <span class=\"token string\">'abc'</span>\nstring2 <span class=\"token operator\">=</span> <span class=\"token string\">'acc'</span>\n\n<span class=\"token comment\"># 문자열에서 한글자씩 뽑아서 출력</span>\nchar <span class=\"token keyword\">for</span> char <span class=\"token keyword\">in</span> string\n<span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># 문자열1에 있는 글자가 2에 있는지 출력</span>\nchar <span class=\"token keyword\">in</span> string2 <span class=\"token keyword\">for</span> char <span class=\"token keyword\">in</span> string\n<span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># 문자열1에 있는 글자가 2에 몇개나 있는지 출력</span>\n<span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>char <span class=\"token keyword\">in</span> string2 <span class=\"token keyword\">for</span> char <span class=\"token keyword\">in</span> string<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">=</span> <span class=\"token number\">2</span></code></pre></div>\n<p><br/><br/></p>\n<hr>\n<h3 id=\"유용한-함수span-idusefulspan\" style=\"position:relative;\"><a href=\"#%EC%9C%A0%EC%9A%A9%ED%95%9C-%ED%95%A8%EC%88%98span-idusefulspan\" aria-label=\"유용한 함수span idusefulspan permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>유용한 함수<span id=\"useful\"></span></h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># 프로그래머스 로그 찍기</span>\n<span class=\"token keyword\">import</span> logging\nlogging<span class=\"token punctuation\">.</span>warning<span class=\"token punctuation\">(</span><span class=\"token string\">'tempList : {}'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>tempList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token comment\"># zip() = 두 개 이상의 시퀀스를 하나로 묶어서 튜플로 반환</span>\n<span class=\"token comment\"># zip은 제너레이터를 반환하므로 출력 시 list(zip(x,y))형태로 사용</span>\n\nx <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\ny <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">,</span>d<span class=\"token punctuation\">]</span>\nz <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>ㄱ<span class=\"token punctuation\">,</span>ㄴ<span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># zip 개별 접근 및 튜플 반환 확인</span>\nd <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\nd<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">)</span>\n\nd<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n\nd<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># 하나 묶기</span>\n<span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># 3개 묶기</span>\n<span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">zip</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>ㄱ<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>ㄴ<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># ---------------------------------------</span>\n\n<span class=\"token comment\"># 아스테리스크(*) : 시퀀스 언패킹 연산자</span>\nfruit <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>apple<span class=\"token punctuation\">,</span> tomato<span class=\"token punctuation\">,</span> banana<span class=\"token punctuation\">]</span>\n<span class=\"token operator\">*</span>fruit <span class=\"token operator\">=</span> apple<span class=\"token punctuation\">,</span> tomato<span class=\"token punctuation\">,</span> banana\n\n<span class=\"token comment\"># 앞의 파라미터 갯수만큼 넣고 나머지는 언패킹하여 b에 넣음</span>\na<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>c <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># 아스테리스크 2개(**)는 사전(Dictionary)과 같은 키/값 페어 연산에서 사용</span>\ninfo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'year'</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">2014</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'month'</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'day'</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">}</span>\nnewInfo1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">'year'</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">2021</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>info<span class=\"token punctuation\">}</span>\nnewInfo2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">**</span>info<span class=\"token punctuation\">,</span> <span class=\"token string\">'month'</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'day'</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">25</span><span class=\"token punctuation\">}</span>\n\n</code></pre></div>\n<p><br/><br/></p>\n<hr>\n<h3 id=\"파싱-라이브러리-beautifulsoup4bs4span-idbs4span\" style=\"position:relative;\"><a href=\"#%ED%8C%8C%EC%8B%B1-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC-beautifulsoup4bs4span-idbs4span\" aria-label=\"파싱 라이브러리 beautifulsoup4bs4span idbs4span permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파싱 라이브러리 BeautifulSoup4(bs4)<span id=\"bs4\"></span></h3>\n<p>아래 코드는 크롤링한 데이터를 Python파일와 같은 위치에 result.json을 만들어 저장하는 예제.(이준범님 코드)</p>\n<p>내가 직접 만든 크롤러는 <a href=\"https://github.com/MaliciousJ/NewsCrawler\">NewsCralwer</a>를 참고하자.</p>\n<p>여러 특성(제목, 날짜, 키워드분류 등)에 대한 분류가 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># parser.py</span>\n<span class=\"token keyword\">import</span> requests\n<span class=\"token keyword\">from</span> bs4 <span class=\"token keyword\">import</span> BeautifulSoup\n<span class=\"token keyword\">import</span> json\n<span class=\"token keyword\">import</span> os\n\n<span class=\"token comment\"># python파일의 위치</span>\nBASE_DIR <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>dirname<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>abspath<span class=\"token punctuation\">(</span>__file__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nreq <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'https://beomi.github.io/beomi.github.io_old/'</span><span class=\"token punctuation\">)</span>\nhtml <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>text\nsoup <span class=\"token operator\">=</span> BeautifulSoup<span class=\"token punctuation\">(</span>html<span class=\"token punctuation\">,</span> <span class=\"token string\">'html.parser'</span><span class=\"token punctuation\">)</span>\nmy_titles <span class=\"token operator\">=</span> soup<span class=\"token punctuation\">.</span>select<span class=\"token punctuation\">(</span>\n    <span class=\"token string\">'h3 > a'</span>\n    <span class=\"token punctuation\">)</span>\n\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">for</span> title <span class=\"token keyword\">in</span> my_titles<span class=\"token punctuation\">:</span>\n    data<span class=\"token punctuation\">[</span>title<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> title<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'href'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>BASE_DIR<span class=\"token punctuation\">,</span> <span class=\"token string\">'result.json'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'w+'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> json_file<span class=\"token punctuation\">:</span>\n    json<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> json_file<span class=\"token punctuation\">)</span></code></pre></div>\n<p><br/><br/></p>\n<hr>\n<p><em>참고자료</em></p>\n<p><em>1. <a href=\"https://devanix.tistory.com/296\">파이썬 - 정규표현식 모듈</a></em></p>\n<p><em>2. <a href=\"https://withcoding.com/74\">파이썬 str 문자열 객체 메소드 함수 정리</a></em></p>\n<p><em>3. <a href=\"https://greeksharifa.github.io/%EC%A0%95%EA%B7%9C%ED%91%9C%ED%98%84%EC%8B%9D(re)/2018/07/20/regex-usage-01-basic/\">파이썬 정규표현식(re) 사용법</a></em></p>\n<p><em>4. <a href=\"https://ohgyun.com/392\">정규식 단어 경계 메타 문자의 정확한 이해</a></em></p>\n<p><em>5. <a href=\"https://beomi.github.io/2017/01/20/HowToMakeWebCrawler/\">나만의 웹 크롤러 만들기 with Requests/BeautifulSoup</a></em></p>\n<p><em>6. <a href=\"https://withcoding.com/75\">파이썬 list 리스트 사용법 정리 (삽입, 삭제, 정렬)</a></em></p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#index\">INDEX</a></p>\n<ul>\n<li><a href=\"#%EB%AC%B8%EC%9E%90%EC%97%B4-%EA%B4%80%EB%A0%A8-%EB%A9%94%EC%86%8C%EB%93%9Cspan-idstringspan\">문자열 관련 메소드<span id=\"string\"></span></a></li>\n<li><a href=\"#%EB%A6%AC%EC%8A%A4%ED%8A%B8-%EA%B4%80%EB%A0%A8-%ED%95%A8%EC%88%98span-idlistspan\">리스트 관련 함수<span id=\"list\"></span></a></li>\n<li><a href=\"#%EC%A0%95%EA%B7%9C%ED%91%9C%ED%98%84%EC%8B%9Dre%EB%AA%A8%EB%93%88span-idrespan\">정규표현식(re모듈)<span id=\"re\"></span></a></li>\n<li><a href=\"#list-comprehentionspan-idcomprespan\">List Comprehention<span id=\"compre\"></span></a></li>\n<li><a href=\"#%EC%9C%A0%EC%9A%A9%ED%95%9C-%ED%95%A8%EC%88%98span-idusefulspan\">유용한 함수<span id=\"useful\"></span></a></li>\n<li><a href=\"#%ED%8C%8C%EC%8B%B1-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC-beautifulsoup4bs4span-idbs4span\">파싱 라이브러리 BeautifulSoup4(bs4)<span id=\"bs4\"></span></a></li>\n</ul>\n</li>\n</ul>\n</div>","frontmatter":{"date":"August 13, 2022","title":"파이썬(Python) 문법 정리","categories":"how-to","author":"주녁","emoji":"🔮"},"fields":{"slug":"/How-to-use-python/"}},"site":{"siteMetadata":{"siteUrl":"https://www.junwork.net","comments":{"utterances":{"repo":"junwork123/blog-comments"}}}}},"pageContext":{"slug":"/Spring-Learn-MVC-version-diff/","nextSlug":"/Spring-Learn-What-is-DI/","prevSlug":"/How-to-use-python/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}