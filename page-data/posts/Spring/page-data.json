{"componentChunkName":"component---src-templates-category-template-js","path":"/posts/Spring","result":{"pageContext":{"currentCategory":"Spring","categories":["All","Spring","how-to","블로그-발전기"],"edges":[{"node":{"id":"43dc49f4-5e31-5b54-9058-2da23b3dd185","excerpt":"스프링 라이프 사이클 스프링 빈은 간단하게 다음과 같은 라이프사이클을 가진다. 객체 생성 → 의존관계 주입  좀 더 자세하게 나누면 아래와 같다. 어플리케이션 시작 → 스프링 컨테이너 생성 → 스프링 빈 생성 → 의존관계 주입 → 초기화 콜백(빈이 생성되고, 빈의 의존관계 주입이 완료된 후 호출) → 사용 → 소멸전 콜백(빈이 소멸되기 직전에 호출) → 스프링 종료  스프링 빈은 객체를 생성하고, 의존관계 주입이 다 끝난 다음에야 필요한 데이터를 사용할 수 있는 준비가 완료된다. 따라서 초기화 작업은 의존관계 주입이 모두 완료되고 난 다음에 호출해야 한다.  그런데 개발자가 의존관계 주입이 모두 완료된 시점을 어떻게 알 수 있을까? 스프링은 의존관계 주입이 완료되면 스프링 빈에게 콜백 메서드를 통해서 초기화 시점을 알려주는 다양한 기능을 제공한다.  또한 스프링은 스프링 컨테이너가 종료되기 직전에 소멸 콜백을 준다. 따라서 안전하게 종료 작업을 진행할 수 있다.  스프링은 크게 3…","fields":{"slug":"/Spring-Learn-Life-Cycle/"},"frontmatter":{"categories":"Spring","title":"스프링 라이프 사이클","date":"July 28, 2022"}},"next":{"fields":{"slug":"/How-to-use-intelliJ/"}},"previous":null},{"node":{"id":"ccb9cb8f-a475-527a-93dd-eb5818cd9c4e","excerpt":"지적과 댓글은 언제나 환영합니다!  생성자 주입을 써야하는 이유 불변 생성자 주입을 사용하면 애플리케이션 종료까지 의존관계를 변경할 수 없다. 대부분의 의존관계는 애플리케이션 종료까지 변하지 않아야 좋은 설계라고 할 수 있다. 때문에 생성자 주입을 사용해야 한다. 다른 주입방식은 public으로 열어놔야 하기 때문에 수정의 우려가 있어 좋은 설계방법이 아니다.  누락방지 final 키워드 사용으로 생성자에서 혹시라도 값이 설정되지 않는 오류를 컴파일 시점에서 검출할 수 있다. 다른 주입 방식은 생성자 호출 이후에 주입되므로 final 키워드를 사용할 수 없다. DI란 외부에서 두 객체 간의 관계를 결정해주는 디자인 패턴으로, 인터페이스를 사이에 둬서 클래스 레벨에서는 의존관계가 고정되지 않도록 하고 런타임 시에 관계를 다이나믹하게 주입하여 유연성을 확보하고 결합도를 낮출 수 있게 해준다. OCP 원칙을 지키며 객체의 불변성을 확보할 수 있다. 테스트 코드의 작성이 용이해진다. fi…","fields":{"slug":"/Spring-Learn-Why-Use-DI/"},"frontmatter":{"categories":"Spring","title":"스프링 생성자 주입을 써야하는 이유","date":"July 23, 2022"}},"next":{"fields":{"slug":"/blog-social-feature-button2/"}},"previous":{"fields":{"slug":"/How-to-use-intelliJ/"}}}]}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}