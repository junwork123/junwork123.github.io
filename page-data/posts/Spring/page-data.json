{
    "componentChunkName": "component---src-templates-category-template-js",
    "path": "/posts/Spring",
    "result": {"pageContext":{"currentCategory":"Spring","categories":["All","Spring","knowledge","how-to","blog-dev"],"edges":[{"node":{"id":"d33978b6-42dc-5f40-970b-156814129346","excerpt":"지적과 댓글은 언제나 환영합니다!  Spring으로 개발을 하다보면 @Bean과 @Component를 언제 써야할지 헷갈릴때가 있다. 둘다 Bean을 생성할때 사용하는 어노테이션인데 왜 2개로 나누어져있을까? @Bean의 정의와 용도 @Bean의 용도를 한줄로 요약하자면, 개발자가 컨트롤이 불가능한 하고 싶은 경우에 사용된다. 의 documentation…","fields":{"slug":"/Spring-Learn-Bean-And-Component/"},"frontmatter":{"categories":"Spring","title":"스프링 @Bean과 @Component의 차이점을 아시나요?","date":"September 19, 2022"}},"next":{"fields":{"slug":"/knowledge-about-Cookie-and-Cache/"}},"previous":null},{"node":{"id":"5b921afe-b7ae-5f7a-b57d-6e1aa02ca796","excerpt":"지적과 댓글은 언제나 환영합니다!  스프링 로그(Log)를 파일로 남겨보자 로그는 왜 쓸까? 로그는 소프트웨어의 이벤트를 기록하는 것으로 Debug나 단순 콘솔 출력(print)에 비해 아래와 같은 장점이 있다. 그렇다면 스프링에서 로그에 대해 어떤 방법을 사용할 수 있을까? 두 가지 선택지 2022년 현재, 스프링에서 가장 널리 쓰이는 인터페이스는 sl…","fields":{"slug":"/Spring-create-log-files/"},"frontmatter":{"categories":"Spring","title":"스프링 로그를 파일로 남겨보자(logback, Slf4j)","date":"August 30, 2022"}},"next":{"fields":{"slug":"/Spring-hide-api-key/"}},"previous":{"fields":{"slug":"/How-to-use-java/"}}},{"node":{"id":"2c5befa3-c7d5-5313-8a59-606c93f8385c","excerpt":"지적과 댓글은 언제나 환영합니다!  스프링 API Key를 숨겨보자 Git을 활용해 개발을 하다보면 API Key값이 노출되는 경우가 종종 있다. (Git Guardian을 통해 무료 진단해보는 것을 추천한다) 오늘은 Spring 설정으로 안전하게 이 값을 숨기고 가져오는 작업을 진행해보자.  Application Property 등록 에 아래 내용을 추…","fields":{"slug":"/Spring-hide-api-key/"},"frontmatter":{"categories":"Spring","title":"스프링 API Key를 숨겨보자","date":"August 29, 2022"}},"next":{"fields":{"slug":"/knowledge-about-rest/"}},"previous":{"fields":{"slug":"/Spring-create-log-files/"}}},{"node":{"id":"ade93107-ce98-51c8-ae57-5b7ee0f8756f","excerpt":"지적과 댓글은 언제나 환영합니다!  # Spring MVC 객체와 버전별 차이 이번 포스팅에서는 Spring에서 사용하는 MVC 모델이 발전해온 과정을 간략한 코드를 통해 살펴보도록 하겠다. (이 글은 인프런 김영한님 강의를 바탕으로 작성되었습니다.) MVC 버전1 매개변수 : request, response 반환값 : void 각 Controller가 …","fields":{"slug":"/Spring-Learn-MVC-version-diff/"},"frontmatter":{"categories":"Spring","title":"스프링 MVC 객체와 버전별 차이","date":"August 09, 2022"}},"next":{"fields":{"slug":"/Spring-Learn-What-is-DI/"}},"previous":{"fields":{"slug":"/How-to-use-vscode/"}}},{"node":{"id":"658d2d6f-755a-597e-8bb8-de83ccb4e5a8","excerpt":"지적과 댓글은 언제나 환영합니다!  의존성 주입이란? 스프링에서 지원하는 핵심 프로그래밍 모델 중 하나로 말 그대로 의존관계를 외부에서 결정해주는 디자인 패턴이다.  의존관계? 의존관계는 쉽게 이야기하자면 로 말할 수 있다. 고객마다 할인정책을 정의해준 초기 모델에서 VIP 고객전용으로   (이미 다른 서비스에서도 할인율을 사용하고 있다면 더 많은 수정이…","fields":{"slug":"/Spring-Learn-What-is-DI/"},"frontmatter":{"categories":"Spring","title":"스프링 의존성 주입(Dependency Injection)이란?","date":"July 31, 2022"}},"next":{"fields":{"slug":"/Spring-Learn-Lombok-annotation/"}},"previous":{"fields":{"slug":"/Spring-Learn-MVC-version-diff/"}}},{"node":{"id":"d05bc6a6-fb33-5124-b4aa-a04fb498d336","excerpt":"지적과 댓글은 언제나 환영합니다! 롬복(Lombok) 이란? Lombok이란 어노테이션으로 코드 의존성을 줄여주는 라이브러리이다. 쉽게 말해서, 변수명을 변경하면 getter/setter 등을 바꾸어줘야 한다. Lombok을 이용하면 생성자 등을 자동완성 시킬 수 있어서 쉽게 변경이 가능하다.  다양한 어노테이션이 있지만 기본적인 어노테이션을 먼저 알아보…","fields":{"slug":"/Spring-Learn-Lombok-annotation/"},"frontmatter":{"categories":"Spring","title":"스프링 롬복 어노테이션 정리(Lombok annotation)","date":"July 30, 2022"}},"next":{"fields":{"slug":"/Spring-Learn-Life-Cycle/"}},"previous":{"fields":{"slug":"/Spring-Learn-What-is-DI/"}}},{"node":{"id":"43dc49f4-5e31-5b54-9058-2da23b3dd185","excerpt":"스프링 라이프 사이클 스프링 빈은 간단하게 다음과 같은 라이프사이클을 가진다. 객체 생성 → 의존관계 주입  좀 더 자세하게 나누면 아래와 같다.\n어플리케이션 시작\n→ 스프링 컨테이너 생성\n→ 스프링 빈 생성\n→ 의존관계 주입\n→ 초기화 콜백(빈이 생성되고, 빈의 의존관계 주입이 완료된 후 호출)\n→ 사용\n→ 소멸전 콜백(빈이 소멸되기 직전에 호출)\n→ …","fields":{"slug":"/Spring-Learn-Life-Cycle/"},"frontmatter":{"categories":"Spring","title":"스프링 라이프 사이클(Spring Life Cycle)","date":"July 28, 2022"}},"next":{"fields":{"slug":"/How-to-use-intelliJ/"}},"previous":{"fields":{"slug":"/Spring-Learn-Lombok-annotation/"}}},{"node":{"id":"ccb9cb8f-a475-527a-93dd-eb5818cd9c4e","excerpt":"지적과 댓글은 언제나 환영합니다!  생성자 주입을 써야하는 이유 불변 생성자 주입을 사용하면 애플리케이션 종료까지 의존관계를 변경할 수 없다. 대부분의 의존관계는 애플리케이션 종료까지 변하지 않아야 좋은 설계라고 할 수 있다. 때문에 생성자 주입을 사용해야 한다. 다른 주입방식은 public으로 열어놔야 하기 때문에 수정의 우려가 있어 좋은 설계방법이 아…","fields":{"slug":"/Spring-Learn-Why-Use-DI/"},"frontmatter":{"categories":"Spring","title":"스프링 생성자 주입(Constructor Injection)을 써야하는 이유","date":"July 23, 2022"}},"next":{"fields":{"slug":"/blog-social-feature-button2/"}},"previous":{"fields":{"slug":"/How-to-use-intelliJ/"}}}]}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}