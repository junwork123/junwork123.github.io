{
    "componentChunkName": "component---src-templates-blog-template-js",
    "path": "/knowledge-about-IoC-And-DI/",
    "result": {"data":{"cur":{"id":"d246735e-c820-57d1-a521-88904303a74a","html":"<p>지적과 댓글은 언제나 환영합니다!</p>\n<br>\n<hr>\n<h2 id=\"피자가게에서-시작하는-질문\" style=\"position:relative;\"><a href=\"#%ED%94%BC%EC%9E%90%EA%B0%80%EA%B2%8C%EC%97%90%EC%84%9C-%EC%8B%9C%EC%9E%91%ED%95%98%EB%8A%94-%EC%A7%88%EB%AC%B8\" aria-label=\"피자가게에서 시작하는 질문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>피자가게에서 시작하는 질문</strong></h2>\n<br>\n<p>피자를 만드는 <u>직원은 고용주가 고용했지만</u>,</p>\n<p>정작 <u>손님 명령에 따라 일한다.</u></p>\n<p>혹시, 위 사실이 이상하다는 생각을 해본 적 있는가?</p>\n<p>전혀 이상하게 느끼지 못했을 것이다.</p>\n<br>\n<p>프로그래밍의 많은 부분은 현실세계를 모방하여 만들어진다.</p>\n<p><u>서비스를 제공하는 쪽이 사용하는 쪽에 의존</u>한다.</p>\n<p>이를 <code class=\"language-text\">제어의 역전(IoC, Inverse of Control)</code>라고 부른다.</p>\n<p>IoC도 피자가게와 같은 맥락을 가진다.</p>\n<br>\n<p>IoC는 의존관계를 최소화하기 위해 사용한다.</p>\n<p>그렇다면, <u>의존관계 최소화는 왜 필요할까?</u></p>\n<br/>\n<hr>\n<h2 id=\"피자와-의존관계\" style=\"position:relative;\"><a href=\"#%ED%94%BC%EC%9E%90%EC%99%80-%EC%9D%98%EC%A1%B4%EA%B4%80%EA%B3%84\" aria-label=\"피자와 의존관계 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>피자와 의존관계</strong></h2>\n<br/>\n<p>의존관계 설명에 앞서,</p>\n<p><code class=\"language-text\">피자를 만드는 직원</code> A와</p>\n<p><code class=\"language-text\">서빙을 하는 직원</code> B가 있다고 해보자.</p>\n<br>\n<p><code class=\"language-text\">A</code>는 누가 주문했는지 몰라도, 피자를 만들 수 있다.</p>\n<p><code class=\"language-text\">B</code>는 피자 레시피를 몰라도, 피자를 전달할 수 있다.</p>\n<p>서로 하는 일은 알지만, 내용은 몰라도 되기 때문일 것이다.</p>\n<br>\n<p><u>만약 A와 B가 동일인물(1명)이라면 어떻게 될까?</u></p>\n<br>\n<p>A가 주문을 받을때, 피자를 만들 수 없다.</p>\n<p>A가 피자를 만들때, 주문을 받을 수 없다.</p>\n<p><u>주문받기와 피자만들기 간에 강력한 의존이 생기는 것이다.</u></p>\n<br>\n<p>위 사례를 다음과 같이 치환해보자.</p>\n<br/>\n<hr>\n<h2 id=\"의존관계와-인터페이스\" style=\"position:relative;\"><a href=\"#%EC%9D%98%EC%A1%B4%EA%B4%80%EA%B3%84%EC%99%80-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4\" aria-label=\"의존관계와 인터페이스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>의존관계와 인터페이스</strong></h2>\n<br>\n<p><code class=\"language-text\">날씨 메시지를 생산하는 서비스</code> A와</p>\n<p><code class=\"language-text\">요청에 메시지를 전달하는 컨트롤러</code> B가 있다고 해보자.</p>\n<br>\n<p>A는 누가 요청했는지는 몰라도 날씨 메시지(=피자)를 만들 수 있다.</p>\n<p>B는 날씨 메시지 알고리즘은 몰라도 메시지(=피자)를 전달할 수 있다.</p>\n<p>서로 하는 일은 알지만, 내용은 몰라도 되기 때문일 것이다.</p>\n<br>\n<p>이러한 역할을 하는 것이 <code class=\"language-text\">인터페이스(Interface)</code>이고,</p>\n<p>서로 의존관계를 최소화한 경우라고 표현할 수 있을 것이다.</p>\n<p>*<em><code class=\"language-text\">인터페이스(Interface)</code>를 많이 애용하길 바란다!</em></p>\n<br>\n<p>스프링과 같은 웹 프레임워크를 사용할 때를 생각해보자.</p>\n<p>Controller, Service 같은 객체들의 동작을 우리가 직접 구현하기는 하지만,</p>\n<p><u>해당 객체들이 어느 시점에 호출될 지는 신경쓰지 않는다.</u></p>\n<br>\n<p>단지 사용하는 쪽인 프레임워크가 <u>요구하는대로 객체를 생성하면,</p>\n<p>프레임워크가 가져다가 사용한다.</u></p>\n<p>(해당 객체들을 가져다가 생성하고, 메서드를 호출하고, 소멸시킨다.)</p>\n<p>프로그램의 제어권이 역전된 것이다.</p>\n<br/>\n<p>본론으로 돌아가서</p>\n<p>IoC는 객체지향 원칙을 지키기 위해 사용한다.</p>\n<p><u>역할과 관심을 분리해 변경에 유연한 코드를 작성할 수 있도록 해준다.</u></p>\n<p>(<code class=\"language-text\">응집도</code>를 높이고, <code class=\"language-text\">결합도</code>를 낮춘다.)</p>\n<p>이러한 IoC에도 원칙이 있다.</p>\n<br/>\n<hr>\n<h2 id=\"ioc의-원칙-dip\" style=\"position:relative;\"><a href=\"#ioc%EC%9D%98-%EC%9B%90%EC%B9%99-dip\" aria-label=\"ioc의 원칙 dip permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>IoC의 원칙, DIP</strong></h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1. 고차원 모듈은 저차원 모듈에 의존하면 안된다. \n2. 이 모듈 모두 다른 추상화된 것에 의존해야 한다.\n3. 추상화 된 것은 구체적인 것에 의존하면 안 된다. \n4. 구체적인 것이 추상화된 것에 의존해야 한다. \n                                - Martin, Robert C. -</code></pre></div>\n<br>\n<p>이러한 원칙을 <code class=\"language-text\">DIP</code>(Dependency Inversion Principle)이라고 한다.</p>\n<p>겉보기엔 어려워보이지만, 해석하면 당연한 이야기이다.</p>\n<br/>\n<ol>\n<li>\n<p><code class=\"language-text\">고차원 모듈</code>(=피자 가게)는 <code class=\"language-text\">저차원 모듈</code>(=직원)에 의존하면 안된다.</p>\n<p>직원이 A → C로 변경되어도, 수행하는 역할은 같아야 한다.</p>\n <br>\n</li>\n<li>\n<p>이 <code class=\"language-text\">모듈</code> 모두 다른 <code class=\"language-text\">추상화된 것</code>에 의존해야 한다.</p>\n<p>피자가게는 가게라고 뭉뚱그려 말할 수 있고(추상화),</p>\n<p>직원 또한 일할 수 있는 무언가(인간, 로봇, 똑똑한 강아지..)라고 뭉뚱그려 말할 수 있다.</p>\n<p>→ 모든 개념을 점점 세세하게 분해해야 한다는 의미이다.</p>\n <br>\n</li>\n<li>\n<p><code class=\"language-text\">추상화 된 것</code>(=피자)은 <code class=\"language-text\">구체적인 것</code>(=레시피)에 의존하면 안 된다.</p>\n<p>페퍼로니 피자와 포테이토 피자는 레시피가 달라도 피자라는 개념은 동일하다.</p>\n<p>피자의 재료에 따라 피자의 역할을 벗어나는 경우가 없어야한다.</p>\n<p>(못먹는 피자가 되거나, 피자가 직원 대신 일을 한다던가!)</p>\n <br>\n</li>\n<li>\n<p><code class=\"language-text\">구체적인 것</code>(=레시피)이 <code class=\"language-text\">추상화된 것</code>(=피자)에 의존해야 한다.</p>\n<p>모든 피자는 도우 위에 토핑이 들어가고, 오븐에 굽는다.</p>\n<p>피자의 도우 크기, 토핑 종류, 얼마나 굽는지 구체적인 요소는</p>\n<p>피자를 정의하는데 전혀 영향을 미치지 않는다.</p>\n</li>\n</ol>\n<br>\n<hr>\n<h2 id=\"마치며\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"마치며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>마치며</strong></h2>\n<br>\n<p>이제 IoC와 DIP를 설명할 수 있는가?</p>\n<br>\n<p>이렇게 IoC를 사용하고, DIP를 지킨다면,</p>\n<p>확장에 유연하게 대응할 수 있는</p>\n<p>튼튼한 구조를 설계할 수 있을 것이다.</p>\n<p><br/><br/></p>\n<p><em>출처</em></p>\n<p><em><a href=\"https://develogs.tistory.com/19\">develogs님 블로그</a></em></p>\n<p><em><a href=\"https://ipex.tistory.com/entry/3-Spring-%EA%B0%9C%EC%9A%94-2-IOC-%EB%B0%8F-DI\">깍돌이님 블로그</a></em></p>\n<p><em><a href=\"https://www.youtube.com/watch?v=8lp_nHicYd4&#x26;list=WL&#x26;index=20\">10분 테코톡 오찌, 야호의 DI와 IoC</a></em></p>\n<br/>\n<hr>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%ED%94%BC%EC%9E%90%EA%B0%80%EA%B2%8C%EC%97%90%EC%84%9C-%EC%8B%9C%EC%9E%91%ED%95%98%EB%8A%94-%EC%A7%88%EB%AC%B8\"><strong>피자가게에서 시작하는 질문</strong></a></li>\n<li><a href=\"#%ED%94%BC%EC%9E%90%EC%99%80-%EC%9D%98%EC%A1%B4%EA%B4%80%EA%B3%84\"><strong>피자와 의존관계</strong></a></li>\n<li><a href=\"#%EC%9D%98%EC%A1%B4%EA%B4%80%EA%B3%84%EC%99%80-%EC%9D%B8%ED%84%B0%ED%8E%98%EC%9D%B4%EC%8A%A4\"><strong>의존관계와 인터페이스</strong></a></li>\n<li><a href=\"#ioc%EC%9D%98-%EC%9B%90%EC%B9%99-dip\"><strong>IoC의 원칙, DIP</strong></a></li>\n<li><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\"><strong>마치며</strong></a></li>\n</ul>\n</div>","excerpt":"지적과 댓글은 언제나 환영합니다! 피자가게에서 시작하는 질문 피자를 만드는 직원은 고용주가 고용했지만, 정작 손님 명령에 따라 일한다. 혹시, 위 사실이 이상하다는 생각을 해본 적 있는가? 전혀 이상하게 느끼지 못했을 것이다. 프로그래밍의 많은 부분은 현실세계를 모방하여 만들어진다. 서비스를 제공하는 쪽이 사용하는 쪽에 의존한다. 이를 라고 부른다. IoC도 피자가게와 같은 맥락을 가진다. IoC는 의존관계를 최소화하기 위해 사용한다. 그렇다면, 의존관계 최소화는 왜 필요할까? 피자와 의존관계 의존관계 설명에 앞서,  A와  B가 있다고 해보자. 는 누가 주문했는지 몰라도, 피자를 만들 수 있다. 는 피자 레시피를 몰라도, 피자를 전달할 수 있다. 서로 하는 일은 알지만, 내용은 몰라도 되기 때문일 것이다. 만약 A와 B가 동일인물(1명)이라면 어떻게 될까? A가 주문을 받을때, 피자를 만들 수 없다. A가 피자를 만들때, 주문을 받을 수 없다. 주문받기와 피자만들기 간에 강력한 …","frontmatter":{"date":"September 21, 2022","title":"IoC와 DIP를 아시나요?","categories":"knowledge","author":"주녁","emoji":"🔮"},"fields":{"slug":"/knowledge-about-IoC-And-DI/"}},"next":{"id":"d33978b6-42dc-5f40-970b-156814129346","html":"<p>지적과 댓글은 언제나 환영합니다!</p>\n<p><br/><br/></p>\n<p>Spring으로 개발을 하다보면 @Bean과 @Component를 언제 써야할지 헷갈릴때가 있다.</p>\n<p>둘다 Bean을 생성할때 사용하는 어노테이션인데 왜 2개로 나누어져있을까?</p>\n<br>\n<hr>\n<h2 id=\"bean의-정의와-용도\" style=\"position:relative;\"><a href=\"#bean%EC%9D%98-%EC%A0%95%EC%9D%98%EC%99%80-%EC%9A%A9%EB%8F%84\" aria-label=\"bean의 정의와 용도 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@Bean의 정의와 용도</h2>\n<br>\n<p>@Bean의 용도를 한줄로 요약하자면,</p>\n<p>개발자가 컨트롤이 불가능한 <code class=\"language-text\">외부 라이브러리들을 Bean으로 등록</code>하고 싶은 경우에 사용된다.</p>\n<br>\n<p><code class=\"language-text\">Bean.java</code>의 documentation을 보면, 아래와 같은 문장이 가장 처음써있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Indicates that a method produces a bean to be managed by the Spring container.</code></pre></div>\n<p>그렇다.</p>\n<p>스프링 컨테이너에 의해 관리되는 Bean들을 생성하는 <code class=\"language-text\">method</code>에 사용할 수 있는 어노테이션이다.</p>\n<br>\n<p>실제 정의를 살펴보면 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>METHOD<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>ANNOTATION_TYPE<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Documented</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">Bean</span> <span class=\"token punctuation\">{</span></code></pre></div>\n<br>\n<p>타겟에 <code class=\"language-text\">method</code>에만 적용할 수 있도록 명시되어 있다.</p>\n<p>떄문에 직접 작성한 <code class=\"language-text\">class</code>에는 사용할 수 없는 것이다.</p>\n<br>\n<p>그렇기 때문에 외부 라이브러리를 bean으로 사용하고 싶을 때 <code class=\"language-text\">@Configuration</code> 클래스 안에 <code class=\"language-text\">@bean</code>을 사용하여 생성 메소드를 작성하는 것이다.</p>\n<p><br><br></p>\n<p>그렇다면 <code class=\"language-text\">class</code>에도 사용할 수 있는 어노테이션이 있지 않을까?</p>\n<p><code class=\"language-text\">@Component</code>가 바로 그렇다.</p>\n<br>\n<hr>\n<h2 id=\"component\" style=\"position:relative;\"><a href=\"#component\" aria-label=\"component permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>@Component</h2>\n<br>\n<p><code class=\"language-text\">@Component</code>는 <code class=\"language-text\">class</code>를 bean으로 사용할 수 있도록 해주는 어노테이션이다.</p>\n<p>아래는 <code class=\"language-text\">Component.java</code>에 나오는 원문이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Indicates that an annotated class is a \"component\". Such classes are considered as candidates for auto-detection when using annotation-based configuration and classpath scanning.\nOther class-level annotations may be considered as identifying a component as well, typically a special kind of component: e.g. the @Repository annotation or AspectJ's @Aspect annotation.</code></pre></div>\n<br>\n<p>해석하자면, <u>어노테이션 기반의 configuration에 후보로 등록</u>되도록 해준다.</p>\n<p>또한 다른 클래스 레벨의 어노테이션(ex : <code class=\"language-text\">@Controller</code>, <code class=\"language-text\">@Repository</code>, <code class=\"language-text\">@Service</code>)도 그런 역할을 할 수 있도록 해준다.</p>\n<p>우리가 Spring을 공부하며 배운 내용 그대로가 적혀있다.</p>\n<br>\n<p>실제 정의를 살펴보면 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>TYPE<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span>\n<span class=\"token annotation punctuation\">@Documented</span>\n<span class=\"token annotation punctuation\">@Indexed</span>\n<span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span></code></pre></div>\n<br>\n<p>class에 적용할 수 있도록 타겟이 <code class=\"language-text\">TYPE</code> 형태로 지정되어 있다.</p>\n<p>따라서 직접 만든 클래스에 사용이 가능하다.</p>\n<br>\n<p>다만, <code class=\"language-text\">@Bean</code>과 차이점으로 <code class=\"language-text\">@Indexed</code>라는 어노테이션이 설정되어 있는 것을 볼 수있다.</p>\n<br>\n<p><code class=\"language-text\">@Indexed</code>는 <code class=\"language-text\">@Component</code>어노테이션과 같이 사용되는데, 컴파일 시점에 <code class=\"language-text\">@Component</code> 어노테이션이 검색될 수 있도록 완전정규화된 이름을 부여해주는 역할을 한다.</p>\n<details>\n    <summary>원문 참조</summary>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">The CandidateComponentsIndex is an alternative to classpath scanning that uses a metadata file generated at compilation time. The index allows retrieving the candidate components (i.e. fully qualified name) based on a stereotype. This annotation instructs the generator to index the element on which the annotated element is present or if it implements or extends from the annotated element. The stereotype is the fully qualified name of the annotated element.\n\nConsider the default Component annotation that is meta-annotated with this annotation. If a component is annotated with Component, an entry for that component will be added to the index using the org.springframework.stereotype.Component stereotype.</code></pre></div>\n</details>\n<br>\n<hr>\n<h2 id=\"마치며\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"마치며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치며..</h2>\n<br>\n<p>자, 이제 <code class=\"language-text\">@Bean</code>과 <code class=\"language-text\">@Component</code>의 차이점에 대해 설명할 수 있는가?</p>\n<p>용도에 맞는 어노테이션 사용도 중요하지만,</p>\n<p>정의를 직접 찾아보고 해석해보는 것도 좋은 경험이 될 것이다.</p>\n<br/>\n<h2 id=\"불변\" style=\"position:relative;\"><a href=\"#%EB%B6%88%EB%B3%80\" aria-label=\"불변 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>불변</strong></h2>\n<p><em>출처</em></p>\n<p><em><a href=\"https://jojoldu.tistory.com/27\">jojoldu님 블로그</a></em></p>\n<p><em><a href=\"https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81-mvc-1#\">인프런 스프링 MVC 강의 1편</a></em></p>\n<p><em><a href=\"https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81-%ED%95%B5%EC%8B%AC-%EC%9B%90%EB%A6%AC-%EA%B8%B0%EB%B3%B8%ED%8E%B8/\">인프런 스프링 핵심 원리 기본편</a></em></p>\n<br/>\n<hr>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#bean%EC%9D%98-%EC%A0%95%EC%9D%98%EC%99%80-%EC%9A%A9%EB%8F%84\">@Bean의 정의와 용도</a></li>\n<li><a href=\"#component\">@Component</a></li>\n<li><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0\">마치며..</a></li>\n<li><a href=\"#%EB%B6%88%EB%B3%80\"><strong>불변</strong></a></li>\n</ul>\n</div>","frontmatter":{"date":"September 19, 2022","title":"스프링 @Bean과 @Component의 차이점을 아시나요?","categories":"Spring","author":"주녁","emoji":"🔮"},"fields":{"slug":"/Spring-Learn-Bean-And-Component/"}},"prev":{"id":"7c3c2b18-9c56-5986-84ac-89e66b59ecba","html":"<p>지적과 댓글은 언제나 환영합니다!</p>\n<br/>\n<hr>\n<h2 id=\"싱글톤-패턴\" style=\"position:relative;\"><a href=\"#%EC%8B%B1%EA%B8%80%ED%86%A4-%ED%8C%A8%ED%84%B4\" aria-label=\"싱글톤 패턴 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>싱글톤 패턴</strong></h2>\n<br/>\n<p>클래스의 인스턴스가 딱 1개만 생성되는 것을 보장하는 디자인 패턴이다.</p>\n<p>해당되는 인스턴스에 대해서 private 생성자를 사용해</p>\n<p>최초 1번만 static 인스턴스를 생성하는 디자인 패턴이다.</p>\n<br/>\n<p>이러한 싱글톤 패턴은 내부 설계를 변경하거나 초기화하기가 어렵다.</p>\n<p>또한, private 생성자를 사용하기 때문에 자식 클래스를 만들기 어렵다.</p>\n<p>즉, 많이 사용할수록 유연하지 않은 설계가 된다.</p>\n<br/>\n<hr>\n<h2 id=\"스프링-컨테이너\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88\" aria-label=\"스프링 컨테이너 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>스프링 컨테이너</strong></h2>\n<br/>\n<p>이를 해결하기 위해 등장한 것이 스프링 컨테이너이다.</p>\n<p>싱글톤 패턴을 적용하지 않아도, 객체 인스턴스를 싱글톤으로 관리한다.</p>\n<p>스프링은 객체를 <code class=\"language-text\">프록시(Proxy) 객체</code>로 복사해서</p>\n<p><code class=\"language-text\">Spring Bean</code> 객체로 다시 만든다.</p>\n<p>그리고 이를 <code class=\"language-text\">Spring Bean</code>으로 등록할 수 있게 해준다.</p>\n<p>이 때 사용하는 라이브러리가 CGLIB이다.</p>\n<p>이 CGLIB 덕분에 바이트 코드 조작이 가능해져서,</p>\n<p>Spring에서 객체를 출력할 때, <code class=\"language-text\">AppConfig$$EnhancerBySpringCGLIB</code> 과 같은 문구가 붙은 것이다.</p>\n<br/>\n<p>결과적으로, 스프링 컨테이너는 싱글톤 패턴의 문제점을 해결하면서,</p>\n<p>객체 인스턴스를 싱글톤(1개만 생성)으로 관리한다.</p>\n<br/>\n<hr>\n<h2 id=\"싱글톤-패턴의-주의점\" style=\"position:relative;\"><a href=\"#%EC%8B%B1%EA%B8%80%ED%86%A4-%ED%8C%A8%ED%84%B4%EC%9D%98-%EC%A3%BC%EC%9D%98%EC%A0%90\" aria-label=\"싱글톤 패턴의 주의점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>싱글톤 패턴의 주의점</strong></h2>\n<br/>\n<p>싱글톤 패턴 또는 싱글톤 컨테이너든</p>\n<p>객체 인스턴스를 하나만 생성해서 사용하는 방식의 경우</p>\n<p>여러 클라이언트가 하나의 객체를 공유하기 때문에</p>\n<p>해당 객체를 상태를 유지시키는 구조로 설계해서는 안된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StatefulService</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> price<span class=\"token punctuation\">;</span> <span class=\"token comment\">//상태를 유지하는 필드</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">order</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> price<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name = \"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\" price = \"</span> <span class=\"token operator\">+</span> price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>price <span class=\"token operator\">=</span> price<span class=\"token punctuation\">;</span> <span class=\"token comment\">//여기가 문제!</span>\n    <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> price<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><br/><br/></p>\n<p><em>출처</em></p>\n<p><em><a href=\"https://hongchangsub.com/springcore5/\">hongchangsub님 블로그</a></em></p>\n<p><em><a href=\"https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81-mvc-1#\">인프런 스프링 MVC 강의 1편</a></em></p>\n<p><em><a href=\"https://www.inflearn.com/course/%EC%8A%A4%ED%94%84%EB%A7%81-%ED%95%B5%EC%8B%AC-%EC%9B%90%EB%A6%AC-%EA%B8%B0%EB%B3%B8%ED%8E%B8/\">인프런 스프링 핵심 원리 기본편</a></em></p>\n<br/>\n<hr>\n<div class=\"table-of-contents\">\n<ul>\n<li><a href=\"#%EC%8B%B1%EA%B8%80%ED%86%A4-%ED%8C%A8%ED%84%B4\"><strong>싱글톤 패턴</strong></a></li>\n<li><a href=\"#%EC%8A%A4%ED%94%84%EB%A7%81-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88\"><strong>스프링 컨테이너</strong></a></li>\n<li><a href=\"#%EC%8B%B1%EA%B8%80%ED%86%A4-%ED%8C%A8%ED%84%B4%EC%9D%98-%EC%A3%BC%EC%9D%98%EC%A0%90\"><strong>싱글톤 패턴의 주의점</strong></a></li>\n</ul>\n</div>","frontmatter":{"date":"September 21, 2022","title":"스프링 싱글톤(Singleton)과 컨테이너(Container)를 아시나요?","categories":"Spring","author":"주녁","emoji":"🔮"},"fields":{"slug":"/Spring-Learn-Singleton-And-Container/"}},"site":{"siteMetadata":{"siteUrl":"https://www.junwork.net","comments":{"utterances":{"repo":"junwork123/blog-comments"}}}}},"pageContext":{"slug":"/knowledge-about-IoC-And-DI/","nextSlug":"/Spring-Learn-Bean-And-Component/","prevSlug":"/Spring-Learn-Singleton-And-Container/"}},
    "staticQueryHashes": ["1073350324","1956554647","2938748437"]}